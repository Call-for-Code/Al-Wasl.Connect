!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("rxjs"),require("rxjs/operators"),require("@angular/common")):"function"==typeof define&&define.amd?define("@ngui/map",["exports","@angular/core","rxjs","rxjs/operators","@angular/common"],e):e((t.ngui=t.ngui||{},t.ngui.map={}),t.ng.core,t.rxjs,t.Rx.Observable.prototype,t.ng.common)}(this,function(t,p,c,n,e){"use strict";var i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])};function r(t,e){function o(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}function s(t){if("string"==typeof t){return t.match(/^[\+\-]?[0-9\.]+,[ ]*\ ?[\+\-]?[0-9\.]+$/)&&(t="["+t+"]"),JSON.parse(function(t){try{return JSON.parse(t),t}catch(e){return t.replace(/([\$\w]+)\s*:/g,function(t,e){return'"'+e+'":'}).replace(/'([^']+)'/g,function(t,e){return'"'+e+'"'})}}(t))}return t}function a(t){return t.replace(/(?:^\w|[A-Z]|\b\w)/g,function(t,e){return 0===e?t.toLowerCase():t.toUpperCase()}).replace(/\s+/g,"")}function o(){return"object"==typeof google&&"object"==typeof google.maps}function u(t,e){return Error(t+": library '"+e+"' is missing, please ensure to include it in a 'libraries' parameter.\n    Example:\n      NguiMapModule.forRoot({\n        apiUrl: 'https://maps.googleapis.com/maps/api/js?libraries="+e+"'\n      })\n  ")}var l=function(){function t(t,e,o,i){var n=this;this.nguiMapComponent=t,this.mapObjectName=e,this.inputs=o,this.outputs=i,this.initialized$=new p.EventEmitter,this._subscriptions=[],this.nguiMap=this.nguiMapComponent.nguiMap,this.optionBuilder=this.nguiMapComponent.optionBuilder,this.outputs.forEach(function(t){return n[t]=new p.EventEmitter}),this.mapObjectName=e}return t.prototype.ngOnInit=function(){var e=this;this.nguiMapComponent.mapIdledOnce?this.initialize():this.nguiMapComponent.mapReady$.subscribe(function(t){return e.initialize()})},t.prototype.initialize=function(){if(this.objectOptions=this.optionBuilder.googlizeAllInputs(this.inputs,this),"string"==typeof this.objectOptions.position&&delete this.objectOptions.position,"string"==typeof this.objectOptions.center&&delete this.objectOptions.center,this.libraryName){if(!google.maps[this.libraryName])throw u(this.mapObjectName,this.libraryName);this.mapObject=new google.maps[this.libraryName][this.mapObjectName](this.objectOptions)}else this.mapObject=new google.maps[this.mapObjectName](this.objectOptions);this.mapObject.setMap(this.nguiMapComponent.map),this.mapObject.mapObjectName=this.mapObjectName,this.mapObject.nguiMapComponent=this.nguiMapComponent,this.nguiMap.setObjectEvents(this.outputs,this,"mapObject"),this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName,this.mapObject),this.initialized$.emit(this.mapObject)},t.prototype.ngOnChanges=function(t){this.nguiMap.updateGoogleObject(this.mapObject,t)},t.prototype.ngOnDestroy=function(){this._subscriptions.map(function(t){return t.unsubscribe()}),this.nguiMapComponent.removeFromMapObjectGroup(this.mapObjectName,this.mapObject),this.mapObject&&this.nguiMap.clearObjectEvents(this.outputs,this,"mapObject")},t}();l.propDecorators={initialized$:[{type:p.Output}]};var g=function(){function t(){}return t.prototype.googlizeAllInputs=function(t,e){var o=this,i={};return e.options?(i=e.options,this.onlyOptionsGiven(t,e)||console.error('when "options" are used, other options are ignored')):t.forEach(function(t){e[t]!==undefined&&(i[t]=o.googlize(e[t],{key:t}))}),i},t.prototype.googlizeMultiple=function(t,e){for(var o in e=e||{},t){var i=t[o];"string"!=typeof i?e[o]=i:e.doNotConverStringToNumber&&i.match(/^[0-9]+$/)||(e[o]=this.googlize(i,{key:o}))}return e},t.prototype.googlize=function(t,e){e=e||{};var o=t;if("string"==typeof t&&(o="false"!==t&&("0"===t?0:this.getJSONParsed(t,e)||this.getAnyMapObject(t)||this.getAnyMapConstant(t,e)||this.getDateObject(t)||t)),e.key){var i=e.key;o instanceof Array?"bounds"===i?o=new google.maps.LatLngBounds(o[0],o[1]):"icons"===i?o=this.getMapIcons(o):("position"===i||i.match(/^geoFallback/))&&(o=this.getLatLng(o)):o instanceof Object&&("icon"===i?o=this.getMarkerIcon(o):i.match(/ControlOptions$/)&&(o=this.getMapControlOption(o)))}return delete o.doNotConverStringToNumber,delete o.key,o},t.prototype.getLatLng=function(t){var e;return t[0].constructor===Array?e=t.map(function(t){return new google.maps.LatLng(t[0],t[1])}):!isNaN(parseFloat(t[0]))&&isFinite(t[0])&&(e=new google.maps.LatLng(t[0],t[1])),e},t.prototype.getJSONParsed=function(t,e){var o;try{if((o=s(t))instanceof Array)o[0].constructor!==Object&&(o=this.getLatLng(o));else if(o===Object(o)){var i=e;i.doNotConverStringToNumber=!0,o=this.googlizeMultiple(o,i)}}catch(n){}return o},t.prototype.getAnyMapObject=function(t){var e;if(t.match(/^[A-Z][a-zA-Z0-9]+\(.*\)$/))try{e=Function("return new google.maps."+t+";")()}catch(o){}return e},t.prototype.getAnyMapConstant=function(t,e){var o;if(t.match(/^([A-Z][a-zA-Z0-9]+)\.([A-Z]+)$/))try{var i=t.match(/^([A-Z][a-zA-Z0-9]+)\.([A-Z]+)$/);o=google.maps[i[1]][i[2]]}catch(r){}else if(t.match(/^[A-Z]+$/))try{var n=e.key.charAt(0).toUpperCase()+e.key.slice(1);o=google.maps[n][t]}catch(r){}return o},t.prototype.getMapControlOption=function(t){var e=t;for(var o in e)if(e[o]){var i=e[o];if("string"==typeof i?i=i.toUpperCase():"mapTypeIds"===o&&(i=i.map(function(t){return t.match(/^[A-Z]+$/)?google.maps.MapTypeId[t.toUpperCase()]:t})),"style"===o){var n=o.replace(/Options$/,"")+"Style";e[o]=google.maps[n][i]}else e[o]="position"===o?google.maps.ControlPosition[i]:i}return e},t.prototype.getDateObject=function(t){var e;if(t.match(/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*)?)([zZ]|([+\-])(\d\d):?(\d\d))?$/))try{e=new Date(t)}catch(o){}return e},t.prototype.getMapIcons=function(t){return t.map(function(t){return t.icon.path.match(/^[A-Z_]+$/)&&(t.icon.path=google.maps.SymbolPath[t.icon.path]),t})},t.prototype.getMarkerIcon=function(t){var e=t;for(var o in(""+e.path).match(/^[A-Z_]+$/)&&(e.path=google.maps.SymbolPath[e.path]),e){var i=e[o];"anchor"===o||"origin"===o||"labelOrigin"===o?e[o]=new google.maps.Point(i[0],i[1]):"size"!==o&&"scaledSize"!==o||(e[o]=new google.maps.Size(i[0],i[1]))}return e},t.prototype.onlyOptionsGiven=function(t,e){for(var o=0;o<t.length;o++){var i=t[o];if("options"!==i&&"undefined"!=typeof e[i])return!1}return!0},t}();g.decorators=[{type:p.Injectable}];var h=function(){function t(){}return t.prototype.getCurrentPosition=function(t){return t=t||{timeout:5e3},new c.Observable(function(e){navigator.geolocation?navigator.geolocation.getCurrentPosition(function(t){e.next(t),e.complete()},function(t){return e.error(t)},t):e.error("Browser Geolocation service failed.")})},t}();h.decorators=[{type:p.Injectable}];var m=new p.InjectionToken("NG_MAP_CONFIG_TOKEN"),d=function(){function t(t){this.config=t,this.api$=new c.ReplaySubject(1),this.config=this.config||{apiUrl:"https://maps.google.com/maps/api/js"}}return t.prototype.ngOnDestroy=function(){this.api$.complete()},t}(),f=function(i){function t(t,e){var o=i.call(this,e)||this;return o.zone=t,o}return r(t,i),t.prototype.load=function(){var t=this;"undefined"!=typeof window&&(o()?this.api$.next(google.maps):document.querySelector("#ngui-map-api")||(window.nguiMapRef=window.nguiMapRef||[],window.nguiMapRef.push({zone:this.zone,componentFn:function(){return t.api$.next(google.maps)}}),this.addGoogleMapsApi()))},t.prototype.addGoogleMapsApi=function(){window.initNguiMap=window.initNguiMap||function(){window.nguiMapRef.forEach(function(t){t.zone.run(function(){t.componentFn()})}),window.nguiMapRef.splice(0,window.nguiMapRef.length)};var t=document.createElement("script");t.id="ngui-map-api";var e=this.config.apiUrl;e+=-1!==e.indexOf("?")?"&":"?",t.src=e+"callback=initNguiMap",document.querySelector("body").appendChild(t)},t}(d);f.decorators=[{type:p.Injectable}],f.ctorParameters=function(){return[{type:p.NgZone},{type:undefined,decorators:[{type:p.Optional},{type:p.Inject,args:[m]}]}]};var y=function(e){function t(t){return e.call(this,t)||this}return r(t,e),t.prototype.load=function(){var t=this;if("undefined"!=typeof window)if(o())this.api$.next(google.maps);else if(!document.querySelector("#ngui-map-api")){var e=document.createElement("script");e.id="ngui-map-api",e.async=!0,e.onload=function(){return t.api$.next(google.maps)},e.src=this.config.apiUrl,document.querySelector("body").appendChild(e)}},t}(d);y.decorators=[{type:p.Injectable}],y.ctorParameters=function(){return[{type:undefined,decorators:[{type:p.Optional},{type:p.Inject,args:[m]}]}]};var b=function(){function t(t){this.apiLoader=t,this.apiLoaderSubs=[]}return t.prototype.geocode=function(e){var o=this;return new c.Observable(function(t){o.apiLoaderSubs.push(o.apiLoader.api$.subscribe(function(){return o.requestGeocode(e,t)}))})},t.prototype.ngOnDestroy=function(){this.apiLoaderSubs.map(function(t){return t.unsubscribe()})},t.prototype.requestGeocode=function(t,o){(new google.maps.Geocoder).geocode(t,function(t,e){e===google.maps.GeocoderStatus.OK?(o.next(t),o.complete()):o.error(t)})},t}();b.decorators=[{type:p.Injectable}],b.ctorParameters=function(){return[{type:d}]};var O=function(){function t(t,e,o){var s=this;this.geoCoder=t,this.optionBuilder=e,this.zone=o,this.updateGoogleObject=function(o,t){var e,i,n;if(o)for(var r in t)n="set"+r.replace(/^[a-z]/,function(t){return t.toUpperCase()}),i=t[r].currentValue,-1!==["position","center"].indexOf(r)&&"string"==typeof i?function(e){s.geoCoder.geocode({address:i}).subscribe(function(t){"function"==typeof o[e]?o[e](t[0].geometry.location):console.error('Not all options are dynamically updatable according to Googles Maps API V3 documentation.\nPlease check Google Maps API documentation, and use "setOptions" instead.')})}(n):(e=s.optionBuilder.googlize(i),"function"==typeof o[n]?o[n](e):console.error('Not all options are dynamically updatable according to Googles Maps API V3 documentation.\nPlease check Google Maps API documentation, and use "setOptions" instead.'))}}return t.prototype.setObjectEvents=function(t,n,e){var r=this;t.forEach(function(o){var t=r.getEventName(o),i=r.zone;i.runOutsideAngular(function(){n[e].addListener(t,function(t){var e=t||{};e.target=this,i.run(function(){return n[o].emit(e)})})})})},t.prototype.clearObjectEvents=function(t,o,i){var n=this;t.forEach(function(t){var e=n.getEventName(t);n.zone.runOutsideAngular(function(){o[i]&&google.maps.event.clearListeners(o[i],e)})}),o[i]&&(o[i].setMap&&o[i].setMap(null),delete o[i].nguiMapComponent,delete o[i])},t.prototype.getEventName=function(t){return t.replace(/([A-Z])/g,function(t){return"_"+t.toLowerCase()}).replace(/^map_/,"")},t}();O.decorators=[{type:p.Injectable}],O.ctorParameters=function(){return[{type:b},{type:g},{type:p.NgZone}]};var v=["backgroundColor","center","disableDefaultUI","disableDoubleClickZoom","draggable","draggableCursor","draggingCursor","heading","keyboardShortcuts","mapMaker","mapTypeControl","mapTypeId","maxZoom","minZoom","noClear","overviewMapControl","panControl","panControlOptions","rotateControl","scaleControl","scrollwheel","streetView","styles","tilt","zoom","streetViewControl","zoomControl","zoomControlOptions","mapTypeControlOptions","overviewMapControlOptions","rotateControlOptions","scaleControlOptions","streetViewControlOptions","fullscreenControl","fullscreenControlOptions","options","geoFallbackCenter"],C=["bounds_changed","center_changed","click","dblclick","drag","dragend","dragstart","heading_changed","idle","maptypeid_changed","mousemove","mouseout","mouseover","projection_changed","resize","rightclick","tilesloaded","tile_changed","zoom_changed","mapClick","mapMouseover","mapMouseout","mapMousemove","mapDrag","mapDragend","mapDragstart"],j=function(){function t(t,e,o,i,n,r,s){var a=this;this.optionBuilder=t,this.elementRef=e,this.geolocation=o,this.geoCoder=i,this.nguiMap=n,this.apiLoader=r,this.zone=s,this.mapReady$=new p.EventEmitter,this.mapOptions={},this.inputChanges$=new c.Subject,this.infoWindows={},this.mapIdledOnce=!1,this.initializeMapAfterDisplayed=!1,r.load(),C.forEach(function(t){return a[t]=new p.EventEmitter})}return t.prototype.ngAfterViewInit=function(){var t=this;this.apiLoaderSub=this.apiLoader.api$.pipe(n.first()).subscribe(function(){return t.initializeMap()})},t.prototype.ngAfterViewChecked=function(){this.initializeMapAfterDisplayed&&this.el&&0<this.el.offsetWidth&&this.initializeMap()},t.prototype.ngOnChanges=function(t){this.inputChanges$.next(t)},t.prototype.initializeMap=function(){var e=this;this.el=this.elementRef.nativeElement.querySelector(".google-map"),this.el&&0===this.el.offsetWidth?this.initializeMapAfterDisplayed=!0:(this.initializeMapAfterDisplayed=!1,this.mapOptions=this.optionBuilder.googlizeAllInputs(v,this),this.mapOptions.zoom=this.mapOptions.zoom||15,"string"==typeof this.mapOptions.center&&delete this.mapOptions.center,this.zone.runOutsideAngular(function(){e.map=new google.maps.Map(e.el,e.mapOptions),e.map.mapObjectName="NguiMapComponent",e.mapOptions.center||e.setCenter(),e.nguiMap.setObjectEvents(C,e,"map"),e.map.addListener("idle",function(){e.mapIdledOnce||(e.mapIdledOnce=!0,setTimeout(function(){e.mapReady$.emit(e.map)}))}),e.inputChanges$.pipe(n.debounceTime(1e3),n.tap(function(t){return e.nguiMap.updateGoogleObject(e.map,t)})).subscribe(),"undefined"!=typeof window&&window.nguiMapRef&&(window.nguiMapRef.map=e.map)}))},t.prototype.setCenter=function(){var o=this;this.center?"string"==typeof this.center&&this.geoCoder.geocode({address:this.center}).subscribe(function(t){o.map.setCenter(t[0].geometry.location)},function(t){o.map.setCenter(o.mapOptions.geoFallbackCenter||new google.maps.LatLng(0,0))}):this.geolocation.getCurrentPosition().subscribe(function(t){var e=new google.maps.LatLng(t.coords.latitude,t.coords.longitude);o.map.setCenter(e)},function(t){console.error("ngui-map: Error finding the current position"),o.map.setCenter(o.mapOptions.geoFallbackCenter||new google.maps.LatLng(0,0))})},t.prototype.openInfoWindow=function(t,e){this.infoWindows[t].open(e)},t.prototype.closeInfoWindow=function(t){this.infoWindows[t]&&this.infoWindows[t].close()},t.prototype.ngOnDestroy=function(){this.inputChanges$.complete(),this.el&&!this.initializeMapAfterDisplayed&&this.nguiMap.clearObjectEvents(C,this,"map"),this.apiLoaderSub&&this.apiLoaderSub.unsubscribe()},t.prototype.addToMapObjectGroup=function(t,e){var o=a(t.toLowerCase())+"s";this.map[o]=this.map[o]||[],this.map[o].push(e)},t.prototype.removeFromMapObjectGroup=function(t,e){var o=a(t.toLowerCase())+"s";if(this.map&&this.map[o]){var i=this.map[o].indexOf(e);-1<i&&this.map[o].splice(i,1)}},t}();j.decorators=[{type:p.Component,args:[{selector:"ngui-map",providers:[O,g,b,h],styles:["\n    ngui-map {display: block; height: 300px;}\n    .google-map {width: 100%; height: 100%}\n  "],inputs:v,outputs:C,encapsulation:p.ViewEncapsulation.None,template:'\n    <div class="google-map"></div>\n    <ng-content></ng-content>\n  '}]}],j.ctorParameters=function(){return[{type:g},{type:p.ElementRef},{type:h},{type:b},{type:O},{type:d},{type:p.NgZone}]},j.propDecorators={mapReady$:[{type:p.Output}]};var M=[],w=[],z=function(e){function t(t){return e.call(this,t,"BicyclingLayer",M,w)||this}return r(t,e),t}(l);z.decorators=[{type:p.Directive,args:[{selector:"ngui-map > bicycling-layer",inputs:M,outputs:w}]}],z.ctorParameters=function(){return[{type:j}]};var k=["content","disableAutoPan","maxWidth","pixelOffset","position","zIndex","options"],E=["closeclick","content_changed","domready","position_changed","zindex_changed"],P=function(){function t(t,e,o){var i=this;this.elementRef=t,this.nguiMap=e,this.nguiMapComponent=o,this.initialized$=new p.EventEmitter,this.objectOptions={},this.inputChanges$=new c.Subject,this.elementRef.nativeElement.style.display="none",E.forEach(function(t){return i[t]=new p.EventEmitter})}return t.prototype.ngOnInit=function(){var e=this;this.nguiMapComponent.mapIdledOnce?this.initialize():this.nguiMapComponent.mapReady$.subscribe(function(t){return e.initialize()})},t.prototype.ngOnChanges=function(t){this.inputChanges$.next(t)},t.prototype.initialize=function(){var e=this;this.objectOptions=this.nguiMapComponent.optionBuilder.googlizeAllInputs(k,this),this.infoWindow=new google.maps.InfoWindow(this.objectOptions),this.infoWindow.mapObjectName="InfoWindow",this.elementRef.nativeElement.id?this.nguiMapComponent.infoWindows[this.elementRef.nativeElement.id]=this:console.error('An InfoWindow must have an id. e.g. id="detail"'),this.nguiMap.setObjectEvents(E,this,"infoWindow"),this.inputChanges$.pipe(n.debounceTime(1e3),n.tap(function(t){return e.nguiMap.updateGoogleObject(e.infoWindow,t)})).subscribe(),this.nguiMapComponent.addToMapObjectGroup("InfoWindow",this.infoWindow),this.initialized$.emit(this.infoWindow)},t.prototype.open=function(t){this.infoWindow.setContent(this.template.element.nativeElement),this.infoWindow.open(this.nguiMapComponent.map,t)},t.prototype.close=function(){this.infoWindow&&this.infoWindow.close()},t.prototype.ngOnDestroy=function(){this.inputChanges$.complete(),this.infoWindow&&(this.nguiMap.clearObjectEvents(E,this,"infoWindow"),delete this.infoWindow)},t}();P.decorators=[{type:p.Component,args:[{selector:"ngui-map > info-window",inputs:k,outputs:E,template:"<div #template><ng-content></ng-content></div>"}]}],P.ctorParameters=function(){return[{type:p.ElementRef},{type:O},{type:j}]},P.propDecorators={initialized$:[{type:p.Output}],template:[{type:p.ViewChild,args:["template",{read:p.ViewContainerRef}]}]};var I=["animationChanged","click","clickableChanged","cursorChanged","dblclick","drag","dragend","draggableChanged","dragstart","flatChanged","iconChanged","mousedown","mouseout","mouseover","mouseup","positionChanged","rightclick","shapeChanged","titleChanged","visibleChanged","zindexChanged","map_click","map_mouseover","map_mouseout","map_mouseup","map_mousedown","map_drag","map_dragend"];var L=function(){function t(t,e,o){var i=this;this.nguiMapComponent=t,this.elementRef=e,this.nguiMap=o,this.initialized$=new p.EventEmitter,this.inputChanges$=new c.Subject,this.elementRef.nativeElement.style.display="none",I.forEach(function(t){return i[t]=new p.EventEmitter})}return t.prototype.ngOnInit=function(){var e=this;this.nguiMapComponent.mapIdledOnce?this.initialize():this.nguiMapComponent.mapReady$.subscribe(function(t){return e.initialize()})},t.prototype.ngOnChanges=function(t){this.inputChanges$.next(t)},t.prototype.ngOnDestroy=function(){this.inputChanges$.complete(),this.nguiMapComponent.removeFromMapObjectGroup("CustomMarker",this.mapObject),this.mapObject&&this.nguiMap.clearObjectEvents(I,this,"mapObject")},t.prototype.initialize=function(){var t,e,o=this;this.el=this.elementRef.nativeElement,this.mapObject=(t=this.el,e=this.position,new(function(o){function t(t,e){var n=o.call(this)||this;return n.visible=!0,n.setPosition=function(t){if(n.htmlEl.style.visibility="hidden","Array"===t.constructor.name?n.position=new google.maps.LatLng(t[0],t[1]):"string"==typeof t?(new google.maps.Geocoder).geocode({address:t},function(t,e){e===google.maps.GeocoderStatus.OK&&n.setPosition(t[0].geometry.location)}):t&&"function"==typeof t.lng&&(n.position=t),n.getProjection()&&"function"==typeof n.position.lng){var e=function(){var t=n.getProjection();if(t){var e=t.fromLatLngToDivPixel(n.position),o=Math.round(e.x-n.htmlEl.offsetWidth/2),i=Math.round(e.y-n.htmlEl.offsetHeight/2);n.htmlEl.style.left=o+"px",n.htmlEl.style.top=i+"px",n.htmlEl.style.visibility="visible"}};n.htmlEl.offsetWidth&&n.htmlEl.offsetHeight?e():setTimeout(function(){return e()})}},n.htmlEl=t,n.position=e,n}return r(t,o),t.prototype.onAdd=function(){this.getPanes().overlayMouseTarget.appendChild(this.htmlEl),this.htmlEl.style.position="absolute"},t.prototype.draw=function(){this.setPosition(this.position),this.setZIndex(this.zIndex),this.setVisible(this.visible)},t.prototype.onRemove=function(){},t.prototype.getPosition=function(){return this.position},t.prototype.setZIndex=function(t){t&&(this.zIndex=t),this.htmlEl.style.zIndex=this.zIndex},t.prototype.setVisible=function(t){this.htmlEl.style.display=t?"inline-block":"none",this.visible=t},t}(google.maps.OverlayView))(t,e)),this.mapObject.setMap(this.nguiMapComponent.map),this.nguiMap.setObjectEvents(I,this,"mapObject"),this.inputChanges$.pipe(n.debounceTime(1e3),n.tap(function(t){return o.nguiMap.updateGoogleObject(o.mapObject,t)})).subscribe(),this.nguiMapComponent.addToMapObjectGroup("CustomMarker",this.mapObject),this.initialized$.emit(this.mapObject)},t}();L.decorators=[{type:p.Component,args:[{selector:"ngui-map > custom-marker",inputs:["position"],outputs:I,template:"\n    <ng-content></ng-content>\n  "}]}],L.ctorParameters=function(){return[{type:j},{type:p.ElementRef},{type:O}]},L.propDecorators={initialized$:[{type:p.Output}]};var N=["center","clickable","draggable","editable","fillColor","fillOpacity","map","radius","strokeColor","strokeOpacity","strokePosition","strokeWeight","visible","zIndex","options","geoFallbackCenter"],A=["centerChanged","click","dblclick","drag","dragend","dragstart","mousedown","mousemove","mouseout","mouseover","mouseup","radiusChanged","rightclick"],D=function(o){function t(t){var e=o.call(this,t,"Circle",N,A)||this;return e.nguiMapComp=t,e.objectOptions={},e}return r(t,o),t.prototype.initialize=function(){o.prototype.initialize.call(this),this.setCenter()},t.prototype.setCenter=function(){var o=this;this.center?"string"==typeof this.center&&this._subscriptions.push(this.nguiMapComp.geoCoder.geocode({address:this.center}).subscribe(function(t){o.mapObject.setCenter(t[0].geometry.location)},function(t){console.error("ngui-map, error in finding location from",o.center),o.mapObject.setCenter(o.objectOptions.geoFallbackCenter||new google.maps.LatLng(0,0))})):this._subscriptions.push(this.nguiMapComp.geolocation.getCurrentPosition().subscribe(function(t){var e=new google.maps.LatLng(t.coords.latitude,t.coords.longitude);o.mapObject.setCenter(e)},function(t){console.error("ngui-map, error in finding the current position"),o.mapObject.setCenter(o.objectOptions.geoFallbackCenter||new google.maps.LatLng(0,0))}))},t}(l);D.decorators=[{type:p.Directive,args:[{selector:"ngui-map>circle, ngui-map>map-circle",inputs:N,outputs:A}]}],D.ctorParameters=function(){return[{type:j}]};var $=["controlPosition","controls","drawingMode","featureFactory","style","geoJson","geoJsonUrl"],_=["addfeature","click","dblclick","mousedown","mouseout","mouseover","mouseup","removefeature","removeproperty","rightclick","setgeometry","setproperty"],R=function(e){function t(t){return e.call(this,t,"Data",$,_)||this}return r(t,e),t.prototype.initialize=function(){this.geoJson?this.nguiMapComponent.map.data.addGeoJson(this.geoJson):this.geoJsonUrl?this.nguiMapComponent.map.data.loadGeoJson(this.geoJsonUrl):(this.objectOptions=this.optionBuilder.googlizeAllInputs(this.inputs,this),this.nguiMapComponent.map.data.add(this.objectOptions)),this.mapObject=this.nguiMapComponent.map.data,this.nguiMap.setObjectEvents(this.outputs,this,"mapObject"),this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName,this.mapObject),this.initialized$.emit(this.mapObject)},t}(l);R.decorators=[{type:p.Directive,args:[{selector:"ngui-map > data-layer",inputs:$,outputs:_}]}],R.ctorParameters=function(){return[{type:j}]};var x=["directions","draggable","hideRouteList","infoWindow","panel","markerOptions","polylineOptions","preserveViewport","routeIndex","suppressBicyclingLayer","suppressInfoWindows","suppressMarkers","suppressPolylines"],G=["directions_changed"],S=function(i){function t(t,e){var o=i.call(this,t,"DirectionsRenderer",x,G)||this;return o.geolocation=e,o}return r(t,i),t.prototype.initialize=function(){this.objectOptions=this.optionBuilder.googlizeAllInputs(this.inputs,this),"string"==typeof this.objectOptions.panel&&(this.objectOptions.panel=document.querySelector(this.objectOptions.panel)),this.directionsService=new google.maps.DirectionsService,this.directionsRenderer=new google.maps.DirectionsRenderer(this.objectOptions),this.directionsRenderer.setMap(this.nguiMapComponent.map),this.showDirections(this.directionsRequest),this.nguiMap.setObjectEvents(this.outputs,this,"directionsRenderer"),this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName,this.mapObject),this.initialized$.emit(this.directionsRenderer)},t.prototype.ngOnChanges=function(t){var e={};for(var o in t)-1!==this.inputs.indexOf(o)&&(e[o]=this.optionBuilder.googlize(t[o].currentValue));t.directionsRequest&&this.directionsRenderer&&this.directionsService&&this.showDirections(this.directionsRequest)},t.prototype.showDirections=function(t){var o=this;this.directionsService.route(t,function(t,e){o.directionsRenderer&&(e===google.maps.DirectionsStatus.OK?o.directionsRenderer.setDirections(t):console.error("Directions request failed due to "+e))})},t.prototype.ngOnDestroy=function(){i.prototype.ngOnDestroy.call(this),this.nguiMap.clearObjectEvents(this.outputs,this,"directionsRenderer")},t}(l);S.decorators=[{type:p.Directive,args:[{selector:"ngui-map > directions-renderer",inputs:x,outputs:G}]}],S.ctorParameters=function(){return[{type:j},{type:h}]},S.propDecorators={directionsRequest:[{type:p.Input,args:["directions-request"]}]};var W=["options","circleOptions","drawingControl","drawingControlOptions","drawingMode","map","markerOptions","polygonOptions","polylineOptions","rectangleOptions"],T=["circlecomplete","markercomplete","overlaycomplete","polygoncomplete","polylinecomplete","rectanglecomplete"],Z=function(o){function t(t){var e=o.call(this,t,"DrawingManager",W,T)||this;return e.libraryName="drawing",e}return r(t,o),t}(l);Z.decorators=[{type:p.Directive,args:[{selector:"ngui-map > drawing-manager",inputs:W,outputs:T}]}],Z.ctorParameters=function(){return[{type:j}]};var B=["url","bounds","clickable","opacity"],F=["click","dblclick"],V=function(o){function t(t){var e=o.call(this,t,"GroundOverlay",B,F)||this;return e.objectOptions={},e}return r(t,o),t.prototype.initialize=function(){this.objectOptions=this.optionBuilder.googlizeAllInputs(["clickable","opacity"],this),this.mapObject=new google.maps.GroundOverlay(this.url,this.bounds,this.objectOptions),this.mapObject.setMap(this.nguiMapComponent.map),this.mapObject.mapObjectName=this.mapObjectName,this.nguiMap.setObjectEvents(this.outputs,this,"mapObject"),this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName,this.mapObject),this.initialized$.emit(this.mapObject)},t}(l);V.decorators=[{type:p.Directive,args:[{selector:"ngui-map > ground-overlay",inputs:B,outputs:F}]}],V.ctorParameters=function(){return[{type:j}]};var q=["data","dissipating","gradient","maxIntensity","opacity","radius","options"],U=[],J=function(o){function t(t){var e=o.call(this,t,"HeatmapLayer",q,U)||this;return e.libraryName="visualization",e}return r(t,o),t}(l);J.decorators=[{type:p.Directive,args:[{selector:"ngui-map > heatmap-layer",inputs:q,outputs:U}]}],J.ctorParameters=function(){return[{type:j}]};var K=["clickable","preserveViewport","screenOverlays","suppressInfoWindows","url","zIndex","options"],H=["click","defaultviewport_changed","status_changed"],Q=function(e){function t(t){return e.call(this,t,"KmlLayer",K,H)||this}return r(t,e),t}(l);Q.decorators=[{type:p.Directive,args:[{selector:"ngui-map > kml-layer",inputs:K,outputs:H}]}],Q.ctorParameters=function(){return[{type:j}]};var X=["anchorPoint","animation","clickable","cursor","draggable","icon","label","opacity","optimized","place","position","shape","title","visible","zIndex","options","geoFallbackPosition"],Y=["animationChanged","click","clickableChanged","cursorChanged","dblclick","drag","dragend","draggableChanged","dragstart","flatChanged","iconChanged","mousedown","mouseout","mouseover","mouseup","positionChanged","rightclick","shapeChanged","titleChanged","visibleChanged","zindexChanged"],tt=function(o){function t(t){var e=o.call(this,t,"Marker",X,Y)||this;return e.nguiMapComp=t,e.objectOptions={},e}return r(t,o),t.prototype.ngOnInit=function(){var e=this;this.nguiMapComponent.mapIdledOnce?this.initialize():this.nguiMapComponent.mapReady$.subscribe(function(t){return e.initialize()})},t.prototype.initialize=function(){o.prototype.initialize.call(this),this.setPosition()},t.prototype.setPosition=function(){var o=this;this.position?"string"==typeof this.position&&this._subscriptions.push(this.nguiMapComp.geoCoder.geocode({address:this.position}).subscribe(function(t){o.mapObject.setPosition(t[0].geometry.location)},function(t){console.error("ngui-map, error finding the location from",o.position),o.mapObject.setPosition(o.objectOptions.geoFallbackPosition||new google.maps.LatLng(0,0))})):this._subscriptions.push(this.nguiMapComp.geolocation.getCurrentPosition().subscribe(function(t){var e=new google.maps.LatLng(t.coords.latitude,t.coords.longitude);o.mapObject.setPosition(e)},function(t){console.error("ngui-map, error finding the current location"),o.mapObject.setPosition(o.objectOptions.geoFallbackPosition||new google.maps.LatLng(0,0))}))},t}(l);tt.decorators=[{type:p.Directive,args:[{selector:"ngui-map > marker",inputs:X,outputs:Y}]}],tt.ctorParameters=function(){return[{type:j}]};var et=function(t,e,o){var i=this;this.optionBuilder=t,this.elementRef=e,this.apiLoader=o,this.place_changed=new p.EventEmitter,this.initialized$=new p.EventEmitter,this.initialize=function(){if(i.objectOptions=i.optionBuilder.googlizeAllInputs(["bounds","componentRestrictions","types"],i),!google.maps.places)throw u("PlacesAutoComplete","places");i.autocomplete=new google.maps.places.Autocomplete(i.elementRef.nativeElement,i.objectOptions),i.autocomplete.addListener("place_changed",function(t){i.place_changed.emit(i.autocomplete.getPlace())}),i.initialized$.emit(i.autocomplete)},o.load(),o.api$.pipe(n.first()).subscribe(function(){return i.initialize()})};et.decorators=[{type:p.Directive,args:[{selector:"[places-auto-complete]"}]}],et.ctorParameters=function(){return[{type:g},{type:p.ElementRef},{type:d}]},et.propDecorators={bounds:[{type:p.Input}],componentRestrictions:[{type:p.Input}],types:[{type:p.Input}],place_changed:[{type:p.Output,args:["place_changed"]}],initialized$:[{type:p.Output}]};var ot=["clickable","draggable","editable","fillColor","fillOpacity","geodesic","paths","strokeColor","strokeOpacity","strokePosition","strokeWeight","visible","zIndex","options"],it=["click","dblclick","drag","dragend","dragstart","mousedown","mousemove","mouseout","mouseover","mouseup","rightclick"],nt=function(e){function t(t){return e.call(this,t,"Polygon",ot,it)||this}return r(t,e),t}(l);nt.decorators=[{type:p.Directive,args:[{selector:"ngui-map>polygon, ngui-map>map-polygon",inputs:ot,outputs:it}]}],nt.ctorParameters=function(){return[{type:j}]};var rt=["clickable","draggable","editable","geodesic","icons","path","strokeColor","strokeOpacity","strokeWeight","visible","zIndex","options"],st=["click","dblclick","drag","dragend","dragstart","mousedown","mousemove","mouseout","mouseover","mouseup","rightclick"],at=function(e){function t(t){return e.call(this,t,"Polyline",rt,st)||this}return r(t,e),t}(l);at.decorators=[{type:p.Directive,args:[{selector:"ngui-map > polyline",inputs:rt,outputs:st}]}],at.ctorParameters=function(){return[{type:j}]};var pt=["selector","options","addressControl","addressControlOptions","clickToGo","disableDefaultUI","disableDoubleClickZoom","enableCloseButton","fullscreenControl","fullscreenControlOptions","imageDateControl","linksControl","motionTracking","motionTrackingControl","panControl","panControlOptions","pano","position","pov","scrollwheel","showRoadLabels","visible","zoomControl","zoomControlOptions"],ct=["closeclick","pano_changed","position_changed","pov_changed","resize","status_changed","visible_changed","zoom_changed"],ut=function(e){function t(t){return e.call(this,t,"StreetViewPanorama",pt,ct)||this}return r(t,e),t.prototype.initialize=function(){var t;this.objectOptions=this.optionBuilder.googlizeAllInputs(this.inputs,this),this.objectOptions.selector?(t=document.querySelector(this.selector),delete this.objectOptions.selector):t=this.nguiMapComponent.el,"string"==typeof this.objectOptions.position&&delete this.objectOptions.position,this.mapObject=new google.maps[this.mapObjectName](t,this.objectOptions),this.mapObject.mapObjectName=this.mapObjectName,this.mapObject.nguiMapComponent=this.nguiMapComponent,this.nguiMap.setObjectEvents(this.outputs,this,"mapObject"),this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName,this.mapObject),this.initialized$.emit(this.mapObject)},t.prototype.ngOnDestroy=function(){this.nguiMapComponent.el&&this.nguiMap.clearObjectEvents(this.outputs,this,"mapObject")},t}(l);ut.decorators=[{type:p.Directive,args:[{selector:"ngui-map > street-view-panorama",inputs:pt,outputs:ct}]}],ut.ctorParameters=function(){return[{type:j}]};var lt=["autoRefresh","options"],gt=[],ht=function(e){function t(t){return e.call(this,t,"TrafficLayer",lt,gt)||this}return r(t,e),t}(l);ht.decorators=[{type:p.Directive,args:[{selector:"ngui-map > traffic-layer",inputs:lt,outputs:gt}]}],ht.ctorParameters=function(){return[{type:j}]};var mt=[],dt=[],ft=function(e){function t(t){return e.call(this,t,"TransitLayer",mt,dt)||this}return r(t,e),t}(l);ft.decorators=[{type:p.Directive,args:[{selector:"ngui-map > transit-layer",inputs:mt,outputs:dt}]}],ft.ctorParameters=function(){return[{type:j}]};var yt=[j,P,tt,D,L,nt,P,at,V,ft,ht,J,z,Q,R,ut,et,S,Z],bt=function(){function e(){}return e.forRoot=function(t){return void 0===t&&(t={}),{ngModule:e,providers:[{provide:m,useValue:t}]}},e}();bt.decorators=[{type:p.NgModule,args:[{imports:[e.CommonModule],declarations:yt,exports:[yt],providers:[b,h,O,g,{provide:d,useClass:f}]}]}],t.BicyclingLayer=z,t.NavigatorGeolocation=h,t.OptionBuilder=g,t.NG_MAP_CONFIG_TOKEN=m,t.NgMapApiLoader=d,t.NgMapAsyncApiLoader=y,t.NgMapAsyncCallbackApiLoader=f,t.NguiMapComponent=j,t.InfoWindow=P,t.CustomMarker=L,t.Circle=D,t.DataLayer=R,t.DirectionsRenderer=S,t.DrawingManager=Z,t.GeoCoder=b,t.GroundOverlay=V,t.HeatmapLayer=J,t.KmlLayer=Q,t.Marker=tt,t.NguiMap=O,t.PlacesAutoComplete=et,t.Polygon=nt,t.Polyline=at,t.StreetViewPanorama=ut,t.TrafficLayer=ht,t.TransitLayer=ft,t.NguiMapModule=bt,t.ɵa=l,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=ngui-map.umd.min.js.map
