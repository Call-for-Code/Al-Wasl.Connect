{
  "version": 3,
  "file": "ngui-map.umd.min.js",
  "sources": [
    "ng://@ngui/map/node_modules/tslib/tslib.es6.js",
    "ng://@ngui/map/out/services/util.ts",
    "ng://@ngui/map/out/directives/base-map-directive.ts",
    "ng://@ngui/map/out/services/option-builder.ts",
    "ng://@ngui/map/out/services/navigator-geolocation.ts",
    "ng://@ngui/map/out/services/config.ts",
    "ng://@ngui/map/out/services/api-loader.ts",
    "ng://@ngui/map/out/services/geo-coder.ts",
    "ng://@ngui/map/out/services/ngui-map.ts",
    "ng://@ngui/map/out/components/ngui-map.component.ts",
    "ng://@ngui/map/out/directives/bicycling-layer.ts",
    "ng://@ngui/map/out/components/info-window.ts",
    "ng://@ngui/map/out/components/custom-marker.ts",
    "ng://@ngui/map/out/directives/circle.ts",
    "ng://@ngui/map/out/directives/data-layer.ts",
    "ng://@ngui/map/out/directives/directions-renderer.ts",
    "ng://@ngui/map/out/directives/drawing-manager.ts",
    "ng://@ngui/map/out/directives/ground-overlay.ts",
    "ng://@ngui/map/out/directives/heatmap-layer.ts",
    "ng://@ngui/map/out/directives/kml-layer.ts",
    "ng://@ngui/map/out/directives/marker.ts",
    "ng://@ngui/map/out/directives/places-auto-complete.ts",
    "ng://@ngui/map/out/directives/polygon.ts",
    "ng://@ngui/map/out/directives/polyline.ts",
    "ng://@ngui/map/out/directives/street-view-panorama.ts",
    "ng://@ngui/map/out/directives/traffic-layer.ts",
    "ng://@ngui/map/out/directives/transit-layer.ts",
    "ng://@ngui/map/out/ngui-map.module.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
    "/**\n * return json string from json-like string\n */\nexport function jsonize(str: string): string {\n  try {       // if parsable already, return as it is\n    JSON.parse(str);\n    return str;\n  } catch (e) { // if not parsable, change little\n    return str\n      .replace(/([\\$\\w]+)\\s*:/g, // wrap keys without double quote\n        function(_: any, $1: any) {\n          return '\"' + $1 + '\":';\n        }\n      )\n      .replace(/'([^']+)'/g,   // replacing single quote to double quote\n        function(_: any, $1: any) {\n          return '\"' + $1 + '\"';\n        }\n      );\n  }\n}\n\n/**\n * Returns string to an object by using JSON.parse()\n */\nexport function getJSON(input: any): any {\n  if (typeof input === 'string') {\n    const re = /^[\\+\\-]?[0-9\\.]+,[ ]*\\ ?[\\+\\-]?[0-9\\.]+$/; // lat,lng\n    if (input.match(re)) {\n      input = '[' + input + ']';\n    }\n    return JSON.parse(jsonize(input));\n  } else {\n    return input;\n  }\n}\n\n/**\n * json type definition\n */\n/* tslint:disable */\n//interface IJsonArray extends Array<string|number|boolean|Date|IJson|IJsonArray> { }\nexport interface IJson {\n  //[x: string]: string|number|boolean|Date|IJson|IJsonArray;\n  [x: string]: string|number|boolean|Date|IJson|Array<string|number|boolean|Date|IJson>;\n}\n/* tslint:enable */\n\n\n/**\n * Returns camel-cased from string 'Foo Bar' to 'fooBar'\n */\nexport function toCamelCase(str: string): string {\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function(letter, index) {\n    return index === 0 ? letter.toLowerCase() : letter.toUpperCase();\n  }).replace(/\\s+/g, '');\n}\n\nexport function isMapsApiLoaded() {\n  return typeof google === 'object' && typeof google.maps === 'object';\n}\n\nexport function missingLibraryError(component, libName) {\n  return Error(`${component}: library '${libName}' is missing, please ensure to include it in a 'libraries' parameter.\n    Example:\n      NguiMapModule.forRoot({\n        apiUrl: 'https://maps.googleapis.com/maps/api/js?libraries=${libName}'\n      })\n  `);\n}",
    "import {EventEmitter, SimpleChanges, Output, OnInit, OnChanges, OnDestroy} from '@angular/core';\n\nimport { OptionBuilder } from '../services/option-builder';\nimport { NguiMap } from '../services/ngui-map';\nimport { NguiMapComponent } from '../components/ngui-map.component';\nimport { missingLibraryError } from '../services/util';\nexport abstract class BaseMapDirective implements OnInit, OnChanges, OnDestroy {\n  // this should be redefined on each childr directive\n  @Output() initialized$: EventEmitter<any> = new EventEmitter();\n\n  public mapObject: any; // e.g. google.maps.Marker\n  public objectOptions: any; // e.g. google.maps.MarkerOptions\n\n  public nguiMap: NguiMap;\n  public optionBuilder: OptionBuilder;\n  public libraryName: string;\n  protected _subscriptions = [];\n\n  constructor(\n    protected nguiMapComponent: NguiMapComponent,\n    public    mapObjectName: string,\n    protected inputs: string[],\n    protected outputs: string[]\n  ) {\n    this.nguiMap = this.nguiMapComponent['nguiMap'];\n    this.optionBuilder = this.nguiMapComponent['optionBuilder'];\n    // all outputs must be initialized\n    this.outputs.forEach(output => this[output] = new EventEmitter());\n    this.mapObjectName = mapObjectName;\n  }\n\n  // Initialize this map object when map is ready\n  ngOnInit() {\n    if (this.nguiMapComponent.mapIdledOnce) { // map is ready already\n      this.initialize();\n    } else {\n      this.nguiMapComponent.mapReady$.subscribe(map => this.initialize());\n    }\n  }\n\n  // only called when map is ready\n  initialize(): void {\n    this.objectOptions = this.optionBuilder.googlizeAllInputs(this.inputs, this);\n\n\n    // will be set after geocoded\n    typeof this.objectOptions.position === 'string' && (delete this.objectOptions.position);\n    typeof this.objectOptions.center === 'string' && (delete this.objectOptions.center);\n\n    // noinspection TypeScriptUnresolvedFunction\n    if (this.libraryName) {\n      if (!google.maps[this.libraryName]) {\n        throw missingLibraryError(this.mapObjectName, this.libraryName);\n      }\n      this.mapObject = new google.maps[this.libraryName][this.mapObjectName](this.objectOptions);\n    } else {\n      this.mapObject = new google.maps[this.mapObjectName](this.objectOptions);\n    }\n    this.mapObject.setMap(this.nguiMapComponent.map);\n    this.mapObject['mapObjectName'] = this.mapObjectName;\n    this.mapObject['nguiMapComponent'] = this.nguiMapComponent;\n\n    // set google events listeners and emits to this outputs listeners\n    this.nguiMap.setObjectEvents(this.outputs, this, 'mapObject');\n\n    this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName, this.mapObject);\n    this.initialized$.emit(this.mapObject);\n  }\n\n  // When input is changed, update object too.\n  // e.g., when map center is changed by user, update center on the map\n  ngOnChanges(changes: SimpleChanges) {\n\n    this.nguiMap.updateGoogleObject(this.mapObject, changes);\n  }\n\n  // When destroyed, remove event listener, and delete this object to prevent memory leak\n  ngOnDestroy() {\n    this._subscriptions.map(subscription => subscription.unsubscribe());\n    this.nguiMapComponent.removeFromMapObjectGroup(this.mapObjectName, this.mapObject);\n\n    if (this.mapObject) {\n      this.nguiMap.clearObjectEvents(this.outputs, this, 'mapObject');\n    }\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { getJSON, IJson } from './util';\n\n/**\n * change any object to google object options\n * e.g. [1,2] -> new google.maps.LatLng(1,2);\n */\n@Injectable()\nexport class OptionBuilder {\n\n  googlizeAllInputs(definedInputs: string[], userInputs: any) {\n    let options: any = {};\n\n    // if options given from user, only take options and ignore other inputs\n    if (userInputs.options) {\n\n      options = userInputs.options;\n      if (!this.onlyOptionsGiven(definedInputs, userInputs)) {\n        console.error('when \"options\" are used, other options are ignored');\n      }\n    } else { // if options not given, process all user inputs\n      definedInputs.forEach(input => {\n        if (userInputs[input] !== undefined)  {\n          options[input] = this.googlize(userInputs[input], {key: input});\n        }\n      });\n    }\n    return options;\n  }\n\n  googlizeMultiple(inputs: any[], options?: IJson): any {\n    options =  options || {};\n    for (let key in inputs) {\n      let val = inputs[key];\n      // (non-strings are fully converted)\n      if (typeof val !== 'string') {\n        options[key] = val;\n      } // sometimes '0' needed to stay as it is\n      else if (!(options['doNotConverStringToNumber'] && val.match(/^[0-9]+$/))) {\n        options[key] = this.googlize(val, {key: key});\n      }\n    } // for(var key in attrs)\n    return options;\n  }\n\n  googlize(input: any, options?: IJson): any {\n    options = options || {};\n    let output: any = input;\n    if (typeof input === 'string') { // convert string to a google object\n      if (input === 'false') {\n        output = false;\n      } else if (input === '0') {\n        output = 0;\n      } else {\n        output =\n          // -> googlize -> getJsonParsed -> googlizeMultiple -> googlize until all elements are parsed\n          this.getJSONParsed(input, options)\n\n          /* Foo.Bar(...) -> new google.maps.Foo.Bar(...) */\n          || this.getAnyMapObject(input)\n\n          /*  MapTypeID.HYBRID -> new google.maps.MapTypeID.HYBRID */\n          || this.getAnyMapConstant(input, options)\n\n          /*  2016-06-20 -> new Date('2016-06-20') */\n          || this.getDateObject(input)\n\n          || input;\n      }\n    }\n\n    if (options['key']) {\n      let key: string = <string>options['key'];\n      if (output instanceof Array) { // e.g., [1, 2]\n        if (key === 'bounds') {\n          output = new google.maps.LatLngBounds(output[0], output[1]);\n        } else if (key === 'icons') {\n          output = this.getMapIcons(output);\n        } else if (key === 'position' || key.match(/^geoFallback/) ) {\n          output = this.getLatLng(output);\n        }\n      } else if (output instanceof Object) {\n        if (key === 'icon') {\n          output = this.getMarkerIcon(output);\n        }\n        else if (key.match(/ControlOptions$/)) {\n          output = this.getMapControlOption(output);\n        }\n      }\n    }\n\n    // delete keys only for processing, not used by google\n    delete output['doNotConverStringToNumber'];\n    delete output['key'];\n\n    return output;\n  }\n\n  private getLatLng(input: any): google.maps.LatLng | Array<google.maps.LatLng> {\n    let output: google.maps.LatLng | Array<google.maps.LatLng>;\n    if (input[0].constructor === Array) { // [[1,2],[3,4]]\n      output = (<any[]>input).map((el: number[]) => new google.maps.LatLng(el[0], el[1]));\n    } else if (!isNaN(parseFloat(input[0])) && isFinite(input[0])) {\n      output = new google.maps.LatLng(input[0], input[1]);\n    }\n    return output;\n  }\n\n  private getJSONParsed(input: any, options: IJson): IJson {\n    let output: any;\n    try {\n      output = getJSON(input);\n      if (output instanceof Array) {\n        // [{a:1}] : not lat/lng ones\n\n        if (output[0].constructor !== Object) { // [[1,2],[3,4]] or [1,2]\n          output = this.getLatLng(output);\n        }\n      }\n      // JSON is an object (not array or null)\n      else if (output === Object(output)) {\n        // check for nested hashes and convert to Google API options\n        let newOptions = options;\n        newOptions['doNotConverStringToNumber'] = true;\n        output = this.googlizeMultiple(output, newOptions);\n      }\n    } catch (e) {\n    }\n    return output;\n  }\n\n  private getAnyMapObject(input: string): any {\n    let output: any;\n    if (input.match(/^[A-Z][a-zA-Z0-9]+\\(.*\\)$/)) {\n      try {\n        output = Function(`return new google.maps.${input};`)();\n      } catch (e) {}\n    }\n    return output;\n  }\n\n  private getAnyMapConstant(input: string, options: IJson): any {\n    let output: any;\n\n    if (input.match(/^([A-Z][a-zA-Z0-9]+)\\.([A-Z]+)$/)) { // e.g. MapTypeID.HYBRID\n      try {\n        let matches = input.match(/^([A-Z][a-zA-Z0-9]+)\\.([A-Z]+)$/);\n        output = google.maps[matches[1]][matches[2]];\n      } catch (e) {}\n    } else if (input.match(/^[A-Z]+$/)) { // e.g. HYBRID\n      try {\n        let capitalizedKey = (<string>options['key']).charAt(0).toUpperCase() +\n          (<string>options['key']).slice(1);\n        output = google.maps[capitalizedKey][input];\n      } catch (e) {}\n    }\n    return output;\n  }\n\n  /**\n   * streetviewControl, panControl, etc, not a general control\n   */\n  private getMapControlOption(controlOptions: IJson): IJson {\n    let newControlOptions: IJson = controlOptions;\n\n    for (let key in newControlOptions) { // assign the right values\n      if (newControlOptions[key]) {\n        let value = newControlOptions[key];\n\n        if (typeof value === 'string') {\n          value = (<string>value).toUpperCase();\n        }\n        else if (key === 'mapTypeIds') {\n          value = (<any[]>value).map(function (str) {\n            if (str.match(/^[A-Z]+$/)) { // if constant\n              return google.maps.MapTypeId[str.toUpperCase()];\n            } else { // else, custom map-type\n              return str;\n            }\n          });\n        }\n\n        if (key === 'style') {\n          let objName = key.replace(/Options$/, '') + 'Style';\n          newControlOptions[key] = google.maps[objName][<any>value];\n        }\n        else if (key === 'position') {\n          newControlOptions[key] = google.maps.ControlPosition[<any>value];\n        }\n        else {\n          newControlOptions[key] = value;\n        }\n      }\n    }\n\n    return newControlOptions;\n  }\n\n  private getDateObject(input: string): Date {\n    let output: Date;\n\n    if (input.match(/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*)?)([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/)) {\n      try {\n        output = new Date(input);\n      } catch (e) {}\n    }\n    return output;\n  }\n\n  private getMapIcons(input: any[]): any[] {\n    return input.map(el => {\n      if (el.icon.path.match(/^[A-Z_]+$/)) {\n        el.icon.path = google.maps.SymbolPath[el.icon.path];\n      }\n      return el;\n    });\n  }\n\n  private getMarkerIcon(input: any): any {\n    let output = input;\n\n    if (('' + output.path).match(/^[A-Z_]+$/)) {\n      output.path = google.maps.SymbolPath[output.path];\n    }\n\n    for (let key in output) {\n      let arr = output[key];\n      if (key === 'anchor' || key === 'origin' || key === 'labelOrigin') {\n        output[key] = new google.maps.Point(arr[0], arr[1]);\n    } else if (key === 'size' || key === 'scaledSize') {\n        output[key] = new google.maps.Size(arr[0], arr[1]);\n      }\n    }\n\n    return output;\n  }\n\n  private onlyOptionsGiven(definedInputs: string[], userInputs: any): boolean {\n    for (let i = 0; i < definedInputs.length; i++) {\n      let input = definedInputs[i];\n      if (input !== 'options' && typeof userInputs[input] !== 'undefined') {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\nimport { IJson } from './util';\n\n/**\n *  service for navigator.geolocation methods\n */\n@Injectable()\nexport class NavigatorGeolocation {\n\n  getCurrentPosition(geoLocationOptions?: IJson): Observable<any> {\n    geoLocationOptions = geoLocationOptions || { timeout: 5000 };\n\n    return new Observable<any>((responseObserver: Observer<any>) => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            responseObserver.next(position);\n            responseObserver.complete();\n          },\n          (evt) => responseObserver.error(evt),\n          geoLocationOptions\n        );\n      } else {\n        responseObserver.error('Browser Geolocation service failed.');\n      }\n    });\n  }\n}\n",
    "import { InjectionToken } from '@angular/core';\n\nexport const NG_MAP_CONFIG_TOKEN = new InjectionToken<ConfigOption>('NG_MAP_CONFIG_TOKEN');\nexport interface ConfigOption {\n  apiUrl?: string;\n}\n",
    "import { Injectable, Inject, Optional, NgZone, OnDestroy } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\nimport { NG_MAP_CONFIG_TOKEN } from './config';\nimport { isMapsApiLoaded } from './util';\n\nexport abstract class NgMapApiLoader implements OnDestroy {\n  api$: ReplaySubject<any> = new ReplaySubject(1);\n\n  abstract load();\n\n  constructor(protected config) {\n    this.config = this.config || {apiUrl: 'https://maps.google.com/maps/api/js'};\n  }\n\n  ngOnDestroy() {\n    this.api$.complete();\n  }\n}\n\n@Injectable()\nexport class NgMapAsyncCallbackApiLoader extends NgMapApiLoader {\n  constructor(protected zone: NgZone, @Optional() @Inject(NG_MAP_CONFIG_TOKEN) config) {\n    super(config);\n  }\n\n  load() {\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    if (isMapsApiLoaded()) {\n      this.api$.next(google.maps);\n    } else if (!document.querySelector('#ngui-map-api')) {\n      (<any>window)['nguiMapRef'] = (<any>window)['nguiMapRef'] || [];\n      (<any>window)['nguiMapRef'].push({ zone: this.zone, componentFn: () => this.api$.next(google.maps)});\n      this.addGoogleMapsApi();\n    }\n  }\n\n  private addGoogleMapsApi() {\n    (<any>window)['initNguiMap'] = (<any>window)['initNguiMap'] || function() {\n      (<any>window)['nguiMapRef'].forEach(nguiMapRef => {\n        nguiMapRef.zone.run(function() { nguiMapRef.componentFn(); });\n      });\n      (<any>window)['nguiMapRef'].splice(0, (<any>window)['nguiMapRef'].length);\n    };\n\n    let script = document.createElement( 'script' );\n    script.id = 'ngui-map-api';\n\n    // script.src = \"https://maps.google.com/maps/api/js?callback=initNguiMap\";\n    let apiUrl = this.config.apiUrl ;\n    apiUrl += apiUrl.indexOf('?') !== -1 ? '&' : '?';\n    script.src = apiUrl + 'callback=initNguiMap';\n    document.querySelector('body').appendChild(script);\n  }\n}\n\n@Injectable()\nexport class NgMapAsyncApiLoader extends NgMapApiLoader {\n  constructor(@Optional() @Inject(NG_MAP_CONFIG_TOKEN) config) {\n    super(config);\n  }\n\n  load() {\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    if (isMapsApiLoaded()) {\n      this.api$.next(google.maps);\n    } else if (!document.querySelector('#ngui-map-api')) {\n      let script = document.createElement('script');\n      script.id = 'ngui-map-api';\n\n      script.async = true;\n      script.onload = () => this.api$.next(google.maps);\n      script.src = this.config.apiUrl;\n      document.querySelector('body').appendChild(script);\n    }\n  }\n}\n",
    "import { Injectable, OnDestroy } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\nimport { NgMapApiLoader } from './api-loader';\n\n/**\n *   Provides [defered/promise API](https://docs.angularjs.org/api/ng/service/$q)\n *   service for Google Geocoder service\n */\n\n@Injectable()\nexport class GeoCoder implements OnDestroy {\n  private apiLoaderSubs = [];\n  constructor(private apiLoader: NgMapApiLoader) {}\n\n  geocode(options: google.maps.GeocoderRequest) {\n    return new Observable((responseObserver: Observer<any>) => {\n        this.apiLoaderSubs.push(this.apiLoader.api$\n          .subscribe(() => this.requestGeocode(options, responseObserver)));\n    });\n  }\n\n  ngOnDestroy() {\n    this.apiLoaderSubs.map(sub => sub.unsubscribe());\n  }\n\n  private requestGeocode(options, observer) {\n    const geocoder = new google.maps.Geocoder();\n    geocoder.geocode(options, function (results, status) {\n      if (status === google.maps.GeocoderStatus.OK) {\n        observer.next(results);\n        observer.complete();\n      } else {\n        observer.error(results);\n      }\n    });\n  }\n}\n",
    "import { Injectable, SimpleChanges, NgZone } from '@angular/core';\nimport { OptionBuilder } from './option-builder';\nimport { GeoCoder } from './geo-coder';\n\n/**\n * collection of map instance-related properties and methods\n */\n@Injectable()\nexport class NguiMap {\n\n  constructor(\n    private geoCoder: GeoCoder,\n    private optionBuilder: OptionBuilder,\n    private zone: NgZone,\n  ) {}\n\n  setObjectEvents(definedEvents: string[], thisObj: any, prefix: string) {\n    definedEvents.forEach(definedEvent => {\n      const eventName = this.getEventName(definedEvent),\n        zone = this.zone;\n      zone.runOutsideAngular(() => {\n        thisObj[prefix].addListener(eventName, function(event: google.maps.event) {\n          let param: any = event ? event : {};\n          param.target = this;\n          zone.run(() => thisObj[definedEvent].emit(param));\n        });\n      });\n    });\n  }\n\n  clearObjectEvents(definedEvents: string[], thisObj: any, prefix: string) {\n    definedEvents.forEach(definedEvent => {\n      const eventName = this.getEventName(definedEvent);\n      this.zone.runOutsideAngular(() => {\n        if (thisObj[prefix]) {\n          google.maps.event.clearListeners(thisObj[prefix], eventName);\n        }\n      });\n    });\n\n    if (thisObj[prefix]) {\n      if (thisObj[prefix].setMap) {\n        thisObj[prefix].setMap(null);\n      }\n\n      delete thisObj[prefix].nguiMapComponent;\n      delete thisObj[prefix];\n    }\n\n  }\n\n  updateGoogleObject = (object: any, changes: SimpleChanges)  => {\n    let val: any, currentValue: any, setMethodName: string;\n    if (object) {\n      for (let key in changes) {\n        setMethodName = `set${key.replace(/^[a-z]/, x => x.toUpperCase()) }`;\n        currentValue = changes[key].currentValue;\n        if (['position', 'center'].indexOf(key) !== -1 && typeof currentValue === 'string') {\n          // To preserve setMethod name in Observable callback, wrap it as a function, then execute\n          ((setMethodName) => {\n            this.geoCoder.geocode({address: currentValue}).subscribe(results => {\n              if (typeof object[setMethodName] === 'function') {\n                object[setMethodName](results[0].geometry.location);\n              } else {\n                console.error(\n                  'Not all options are dynamically updatable according to Googles Maps API V3 documentation.\\n' +\n                  'Please check Google Maps API documentation, and use \"setOptions\" instead.'\n                );\n              }\n            });\n          })(setMethodName);\n        } else {\n          val =  this.optionBuilder.googlize(currentValue);\n          if (typeof object[setMethodName] === 'function') {\n            object[setMethodName](val);\n          } else {\n            console.error(\n              'Not all options are dynamically updatable according to Googles Maps API V3 documentation.\\n' +\n              'Please check Google Maps API documentation, and use \"setOptions\" instead.'\n            );\n          }\n        }\n      }\n    }\n  }\n\n  private getEventName(definedEvent) {\n    return definedEvent\n      .replace(/([A-Z])/g, ($1) => `_${$1.toLowerCase()}`) // positionChanged -> position_changed\n      .replace(/^map_/, '');                               // map_click -> click  to avoid DOM conflicts\n  }\n}\n",
    "import {\n  Component,\n  ElementRef,\n  ViewEncapsulation,\n  EventEmitter,\n  SimpleChanges,\n  Output,\n  NgZone,\n  AfterViewInit, AfterViewChecked, OnChanges, OnDestroy\n} from '@angular/core';\n\nimport { OptionBuilder } from '../services/option-builder';\nimport { NavigatorGeolocation } from '../services/navigator-geolocation';\nimport { GeoCoder } from '../services/geo-coder';\nimport { NguiMap } from '../services/ngui-map';\nimport { NgMapApiLoader } from '../services/api-loader';\nimport { InfoWindow } from './info-window';\nimport { Subject } from 'rxjs';\nimport { debounceTime, tap, first } from 'rxjs/operators';\nimport { toCamelCase } from '../services/util';\n\nconst INPUTS = [\n  'backgroundColor', 'center', 'disableDefaultUI', 'disableDoubleClickZoom', 'draggable', 'draggableCursor',\n  'draggingCursor', 'heading', 'keyboardShortcuts', 'mapMaker', 'mapTypeControl', 'mapTypeId', 'maxZoom', 'minZoom',\n  'noClear', 'overviewMapControl', 'panControl', 'panControlOptions', 'rotateControl', 'scaleControl', 'scrollwheel',\n  'streetView', 'styles', 'tilt', 'zoom', 'streetViewControl', 'zoomControl', 'zoomControlOptions', 'mapTypeControlOptions',\n  'overviewMapControlOptions', 'rotateControlOptions', 'scaleControlOptions', 'streetViewControlOptions', 'fullscreenControl', 'fullscreenControlOptions',\n  'options',\n  // ngui-map-specific inputs\n  'geoFallbackCenter'\n];\n\nconst OUTPUTS = [\n  'bounds_changed', 'center_changed', 'click', 'dblclick', 'drag', 'dragend', 'dragstart', 'heading_changed', 'idle',\n  'maptypeid_changed', 'mousemove', 'mouseout', 'mouseover', 'projection_changed', 'resize', 'rightclick',\n  'tilesloaded', 'tile_changed', 'zoom_changed',\n  // to avoid DOM event conflicts\n  'mapClick', 'mapMouseover', 'mapMouseout', 'mapMousemove', 'mapDrag', 'mapDragend', 'mapDragstart'\n];\n\n@Component({\n  selector: 'ngui-map',\n  providers: [NguiMap, OptionBuilder, GeoCoder, NavigatorGeolocation],\n  styles: [`\n    ngui-map {display: block; height: 300px;}\n    .google-map {width: 100%; height: 100%}\n  `],\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <div class=\"google-map\"></div>\n    <ng-content></ng-content>\n  `,\n})\nexport class NguiMapComponent implements OnChanges, OnDestroy, AfterViewInit, AfterViewChecked {\n  // declare INPUTS for AOT compiler\n  public backgroundColor: any; // generated by ngc-pre-compiler.js\n  public center: any; // generated by ngc-pre-compiler.js\n  public disableDefaultUI: any; // generated by ngc-pre-compiler.js\n  public disableDoubleClickZoom: any; // generated by ngc-pre-compiler.js\n  public draggable: any; // generated by ngc-pre-compiler.js\n  public draggableCursor: any; // generated by ngc-pre-compiler.js\n  public draggingCursor: any; // generated by ngc-pre-compiler.js\n  public heading: any; // generated by ngc-pre-compiler.js\n  public keyboardShortcuts: any; // generated by ngc-pre-compiler.js\n  public mapMaker: any; // generated by ngc-pre-compiler.js\n  public mapTypeControl: any; // generated by ngc-pre-compiler.js\n  public mapTypeId: any; // generated by ngc-pre-compiler.js\n  public maxZoom: any; // generated by ngc-pre-compiler.js\n  public minZoom: any; // generated by ngc-pre-compiler.js\n  public noClear: any; // generated by ngc-pre-compiler.js\n  public overviewMapControl: any; // generated by ngc-pre-compiler.js\n  public panControl: any; // generated by ngc-pre-compiler.js\n  public panControlOptions: any; // generated by ngc-pre-compiler.js\n  public rotateControl: any; // generated by ngc-pre-compiler.js\n  public scaleControl: any; // generated by ngc-pre-compiler.js\n  public scrollwheel: any; // generated by ngc-pre-compiler.js\n  public streetView: any; // generated by ngc-pre-compiler.js\n  public styles: any; // generated by ngc-pre-compiler.js\n  public tilt: any; // generated by ngc-pre-compiler.js\n  public zoom: any; // generated by ngc-pre-compiler.js\n  public streetViewControl: any; // generated by ngc-pre-compiler.js\n  public zoomControl: any; // generated by ngc-pre-compiler.js\n  public zoomControlOptions: any; // generated by ngc-pre-compiler.js\n  public mapTypeControlOptions: any; // generated by ngc-pre-compiler.js\n  public overviewMapControlOptions: any; // generated by ngc-pre-compiler.js\n  public rotateControlOptions: any; // generated by ngc-pre-compiler.js\n  public scaleControlOptions: any; // generated by ngc-pre-compiler.js\n  public streetViewControlOptions: any; // generated by ngc-pre-compiler.js\n  public fullscreenControl: any; // generated by ngc-pre-compiler.js\n  public fullscreenControlOptions: any; // generated by ngc-pre-compiler.js\n  public options: any; // generated by ngc-pre-compiler.js\n  public geoFallbackCenter: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n  public bounds_changed: any; // generated by ngc-pre-compiler.js\n  public center_changed: any; // generated by ngc-pre-compiler.js\n  public click: any; // generated by ngc-pre-compiler.js\n  public dblclick: any; // generated by ngc-pre-compiler.js\n  public drag: any; // generated by ngc-pre-compiler.js\n  public dragend: any; // generated by ngc-pre-compiler.js\n  public dragstart: any; // generated by ngc-pre-compiler.js\n  public heading_changed: any; // generated by ngc-pre-compiler.js\n  public idle: any; // generated by ngc-pre-compiler.js\n  public maptypeid_changed: any; // generated by ngc-pre-compiler.js\n  public mousemove: any; // generated by ngc-pre-compiler.js\n  public mouseout: any; // generated by ngc-pre-compiler.js\n  public mouseover: any; // generated by ngc-pre-compiler.js\n  public projection_changed: any; // generated by ngc-pre-compiler.js\n  public resize: any; // generated by ngc-pre-compiler.js\n  public rightclick: any; // generated by ngc-pre-compiler.js\n  public tilesloaded: any; // generated by ngc-pre-compiler.js\n  public tile_changed: any; // generated by ngc-pre-compiler.js\n  public zoom_changed: any; // generated by ngc-pre-compiler.js\n  public mapClick: any; // generated by ngc-pre-compiler.js\n  public mapMouseover: any; // generated by ngc-pre-compiler.js\n  public mapMouseout: any; // generated by ngc-pre-compiler.js\n  public mapMousemove: any; // generated by ngc-pre-compiler.js\n  public mapDrag: any; // generated by ngc-pre-compiler.js\n  public mapDragend: any; // generated by ngc-pre-compiler.js\n  public mapDragstart: any; // generated by ngc-pre-compiler.js\n\n  @Output() public mapReady$: EventEmitter<any> = new EventEmitter();\n\n  public el: HTMLElement;\n  public map: google.maps.Map;\n  public mapOptions: google.maps.MapOptions = {};\n\n  public inputChanges$ = new Subject();\n\n  // map objects by group\n  public infoWindows: { [id: string]: InfoWindow } = { };\n\n  // map has been fully initialized\n  public mapIdledOnce: boolean = false;\n\n  private initializeMapAfterDisplayed = false;\n  private apiLoaderSub;\n\n  constructor(\n    public optionBuilder: OptionBuilder,\n    public elementRef: ElementRef,\n    public geolocation: NavigatorGeolocation,\n    public geoCoder: GeoCoder,\n    public nguiMap: NguiMap,\n    public apiLoader: NgMapApiLoader,\n    public zone: NgZone,\n  ) {\n    apiLoader.load();\n\n    // all outputs needs to be initialized,\n    // http://stackoverflow.com/questions/37765519/angular2-directive-cannot-read-property-subscribe-of-undefined-with-outputs\n    OUTPUTS.forEach(output => this[output] = new EventEmitter());\n  }\n\n  ngAfterViewInit() {\n    this.apiLoaderSub = this.apiLoader.api$\n      .pipe(first())\n      .subscribe(() => this.initializeMap());\n  }\n\n  ngAfterViewChecked() {\n      if (this.initializeMapAfterDisplayed && this.el && this.el.offsetWidth > 0) {\n        this.initializeMap();\n      }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.inputChanges$.next(changes);\n  }\n\n  initializeMap(): void {\n    this.el = this.elementRef.nativeElement.querySelector('.google-map');\n    if (this.el && this.el.offsetWidth === 0) {\n        this.initializeMapAfterDisplayed = true;\n        return;\n    }\n\n    this.initializeMapAfterDisplayed = false;\n    this.mapOptions = this.optionBuilder.googlizeAllInputs(INPUTS, this);\n\n\n    this.mapOptions.zoom = this.mapOptions.zoom || 15;\n    typeof this.mapOptions.center === 'string' && (delete this.mapOptions.center);\n\n    this.zone.runOutsideAngular(() => {\n      this.map = new google.maps.Map(this.el, this.mapOptions);\n      this.map['mapObjectName'] = 'NguiMapComponent';\n\n      if (!this.mapOptions.center) { // if center is not given as lat/lng\n        this.setCenter();\n      }\n\n      // set google events listeners and emits to this outputs listeners\n      this.nguiMap.setObjectEvents(OUTPUTS, this, 'map');\n\n      this.map.addListener('idle', () => {\n        if (!this.mapIdledOnce) {\n          this.mapIdledOnce = true;\n          setTimeout(() => { // Why????, subsribe and emit must not be in the same cycle???\n            this.mapReady$.emit(this.map);\n          });\n        }\n      });\n\n      // update map when input changes\n      this.inputChanges$.pipe(\n        debounceTime(1000),\n        tap((changes: SimpleChanges) => this.nguiMap.updateGoogleObject(this.map, changes)),\n      ).subscribe();\n\n      if (typeof window !== 'undefined' && (<any>window)['nguiMapRef']) {\n        // expose map object for test and debugging on (<any>window)\n        (<any>window)['nguiMapRef'].map = this.map;\n      }\n    });\n  }\n\n  setCenter(): void {\n    if (!this['center']) { // center is not from user. Thus, we set the current location\n      this.geolocation.getCurrentPosition().subscribe(\n        position => {\n\n          let latLng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);\n          this.map.setCenter(latLng);\n        },\n        error => {\n          console.error('ngui-map: Error finding the current position');\n          this.map.setCenter(this.mapOptions['geoFallbackCenter'] || new google.maps.LatLng(0, 0));\n        }\n      );\n    }\n    else if (typeof this['center'] === 'string') {\n      this.geoCoder.geocode({address: this['center']}).subscribe(\n        results => {\n\n          this.map.setCenter(results[0].geometry.location);\n        },\n        error => {\n          this.map.setCenter(this.mapOptions['geoFallbackCenter'] || new google.maps.LatLng(0, 0));\n        });\n    }\n  }\n\n  openInfoWindow(id: string, anchor: google.maps.MVCObject) {\n    this.infoWindows[id].open(anchor);\n  }\n\n  closeInfoWindow(id: string) {\n    // if infoWindow for id exists, close the infoWindow\n    if (this.infoWindows[id])\n      this.infoWindows[id].close();\n  }\n\n  ngOnDestroy() {\n    this.inputChanges$.complete();\n    if (this.el && !this.initializeMapAfterDisplayed) {\n      this.nguiMap.clearObjectEvents(OUTPUTS, this, 'map');\n    }\n    if (this.apiLoaderSub) {\n      this.apiLoaderSub.unsubscribe();\n    }\n  }\n\n  // map.markers, map.circles, map.heatmapLayers.. etc\n  addToMapObjectGroup(mapObjectName: string, mapObject: any) {\n    let groupName = toCamelCase(mapObjectName.toLowerCase()) + 's'; // e.g. markers\n    this.map[groupName] = this.map[groupName] || [];\n    this.map[groupName].push(mapObject);\n  }\n\n  removeFromMapObjectGroup(mapObjectName: string, mapObject: any) {\n    let groupName = toCamelCase(mapObjectName.toLowerCase()) + 's'; // e.g. markers\n    if (this.map && this.map[groupName]) {\n      let index = this.map[groupName].indexOf(mapObject);\n\n      (index > -1) && this.map[groupName].splice(index, 1);\n    }\n  }\n}\n",
    "import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst INPUTS = [];\nconst OUTPUTS = [ ];\n\n@Directive({\n  selector: 'ngui-map > bicycling-layer',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class BicyclingLayer extends BaseMapDirective {\n  // declare INPUTS for AOT compiler\n\n\n  // declare OUTPUTS for AOT compiler\n\n\n  constructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'BicyclingLayer', INPUTS, OUTPUTS);\n  }\n}",
    "import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  SimpleChanges,\n  ViewChild, ViewContainerRef,\n  Output, OnInit, OnChanges, OnDestroy\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { debounceTime, tap } from 'rxjs/operators';\nimport { NguiMap } from '../services/ngui-map';\nimport { NguiMapComponent } from './ngui-map.component';\n\nconst INPUTS = [\n  'content', 'disableAutoPan', 'maxWidth', 'pixelOffset', 'position', 'zIndex', 'options'\n];\nconst OUTPUTS = [\n  'closeclick', 'content_changed', 'domready', 'position_changed', 'zindex_changed'\n];\n\n@Component({\n  selector: 'ngui-map > info-window',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n  template: `<div #template><ng-content></ng-content></div>`,\n})\nexport class InfoWindow implements OnInit, OnChanges, OnDestroy {\n  // declare INPUTS for AOT compiler\n  public content: any; // generated by ngc-pre-compiler.js\n  public disableAutoPan: any; // generated by ngc-pre-compiler.js\n  public maxWidth: any; // generated by ngc-pre-compiler.js\n  public pixelOffset: any; // generated by ngc-pre-compiler.js\n  public position: any; // generated by ngc-pre-compiler.js\n  public zIndex: any; // generated by ngc-pre-compiler.js\n  public options: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n  public closeclick: any; // generated by ngc-pre-compiler.js\n  public content_changed: any; // generated by ngc-pre-compiler.js\n  public domready: any; // generated by ngc-pre-compiler.js\n  public position_changed: any; // generated by ngc-pre-compiler.js\n  public zindex_changed: any; // generated by ngc-pre-compiler.js\n\n  @Output() initialized$: EventEmitter<any> = new EventEmitter();\n\n  public infoWindow: google.maps.InfoWindow;\n  public objectOptions: google.maps.InfoWindowOptions = {};\n  public inputChanges$ = new Subject();\n  @ViewChild('template', {read: ViewContainerRef}) template: ViewContainerRef;\n\n  constructor(\n    private elementRef: ElementRef,\n    private nguiMap: NguiMap,\n    private nguiMapComponent: NguiMapComponent,\n  ) {\n    this.elementRef.nativeElement.style.display = 'none';\n    OUTPUTS.forEach(output => this[output] = new EventEmitter());\n  }\n\n  // Initialize this map object when map is ready\n  ngOnInit() {\n    if (this.nguiMapComponent.mapIdledOnce) { // map is ready already\n      this.initialize();\n    } else {\n      this.nguiMapComponent.mapReady$.subscribe(map => this.initialize());\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.inputChanges$.next(changes);\n  }\n\n  // called when map is ready\n  initialize(): void {\n\n\n    this.objectOptions = this.nguiMapComponent.optionBuilder.googlizeAllInputs(INPUTS, this);\n    this.infoWindow = new google.maps.InfoWindow(this.objectOptions);\n    this.infoWindow['mapObjectName'] = 'InfoWindow';\n\n\n    // register infoWindow ids to NguiMap, so that it can be opened by id\n    if (this.elementRef.nativeElement.id) {\n      this.nguiMapComponent.infoWindows[this.elementRef.nativeElement.id] = this;\n    } else {\n      console.error('An InfoWindow must have an id. e.g. id=\"detail\"');\n    }\n\n    // set google events listeners and emits to this outputs listeners\n    this.nguiMap.setObjectEvents(OUTPUTS, this, 'infoWindow');\n\n    // update object when input changes\n    this.inputChanges$.pipe(\n      debounceTime(1000),\n      tap((changes: SimpleChanges) => this.nguiMap.updateGoogleObject(this.infoWindow, changes))\n    ).subscribe();\n\n    this.nguiMapComponent.addToMapObjectGroup('InfoWindow', this.infoWindow);\n    this.initialized$.emit(this.infoWindow);\n  }\n\n  open(anchor: google.maps.MVCObject) {\n    // set content and open it\n    this.infoWindow.setContent(this.template.element.nativeElement);\n    this.infoWindow.open(this.nguiMapComponent.map, anchor);\n  }\n  close() {\n    // check if infoWindow exists, and closes it\n    if (this.infoWindow)\n      this.infoWindow.close();\n  }\n  ngOnDestroy() {\n    this.inputChanges$.complete();\n    if (this.infoWindow) {\n      this.nguiMap.clearObjectEvents(OUTPUTS, this, 'infoWindow');\n      delete this.infoWindow;\n    }\n  }\n}\n",
    "import {\r\n  Component,\r\n  ElementRef,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges, OnInit, OnDestroy, OnChanges,\r\n} from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { debounceTime, tap } from 'rxjs/operators';\r\n\r\nimport { NguiMap } from '../services/ngui-map';\r\nimport { NguiMapComponent } from './ngui-map.component';\r\n\r\nconst INPUTS = [\r\n  'position'\r\n];\r\n// to avoid DOM event conflicts map_*\r\nconst OUTPUTS = [\r\n  'animationChanged', 'click', 'clickableChanged', 'cursorChanged', 'dblclick', 'drag', 'dragend', 'draggableChanged',\r\n  'dragstart', 'flatChanged', 'iconChanged', 'mousedown', 'mouseout', 'mouseover', 'mouseup', 'positionChanged', 'rightclick',\r\n  'shapeChanged', 'titleChanged', 'visibleChanged', 'zindexChanged',\r\n  'map_click', 'map_mouseover', 'map_mouseout', 'map_mouseup', 'map_mousedown', 'map_drag', 'map_dragend'\r\n];\r\n\r\n/**\r\n * Wrapper to a create extend OverlayView at runtime, only after google maps is loaded.\r\n * Otherwise throws a google is unknown error.\r\n */\r\nfunction getCustomMarkerOverlayView(htmlEl: HTMLElement, position: any) {\r\n\r\n  class CustomMarkerOverlayView extends google.maps.OverlayView {\r\n\r\n    private htmlEl: HTMLElement;\r\n    private position: any;\r\n    private zIndex: string;\r\n    private visible: boolean = true;\r\n\r\n    constructor(htmlEl: HTMLElement, position: any) {\r\n      super();\r\n      this.htmlEl = htmlEl;\r\n      this.position = position;\r\n    }\r\n\r\n    onAdd(): void {\r\n      this.getPanes().overlayMouseTarget.appendChild(this.htmlEl);\r\n\r\n      // required for correct display inside google maps container\r\n      this.htmlEl.style.position = 'absolute';\r\n    }\r\n\r\n    draw(): void {\r\n      this.setPosition(this.position);\r\n      this.setZIndex(this.zIndex);\r\n      this.setVisible(this.visible);\r\n    }\r\n\r\n    onRemove(): void {\r\n      //\r\n    }\r\n\r\n    getPosition() {\r\n      return this.position;\r\n    }\r\n\r\n    setPosition = (position?: any) => {\r\n      this.htmlEl.style.visibility = 'hidden';\r\n\r\n      if (position.constructor.name === 'Array') {\r\n        this.position = new google.maps.LatLng(position[0], position[1]);\r\n      } else if (typeof position === 'string') {\r\n        let geocoder = new google.maps.Geocoder();\r\n\r\n        geocoder.geocode({address: position}, (results, status) => {\r\n          if (status === google.maps.GeocoderStatus.OK) {\r\n\r\n            this.setPosition(results[0].geometry.location);\r\n          } else {\r\n\r\n          }\r\n        });\r\n      } else if (position && typeof position.lng === 'function') {\r\n        this.position = position;\r\n      }\r\n\r\n      if (this.getProjection() && typeof this.position.lng === 'function') {\r\n        let positionOnMap = () => {\r\n          let projection = this.getProjection();\r\n          if (!projection) {\r\n            return;\r\n          }\r\n          let posPixel = projection.fromLatLngToDivPixel(this.position);\r\n          let x = Math.round(posPixel.x - (this.htmlEl.offsetWidth / 2));\r\n          let y = Math.round(posPixel.y - this.htmlEl.offsetHeight / 2);\r\n          this.htmlEl.style.left = x + 'px';\r\n          this.htmlEl.style.top = y + 'px';\r\n          this.htmlEl.style.visibility = 'visible';\r\n        };\r\n\r\n        if (this.htmlEl.offsetWidth && this.htmlEl.offsetHeight) {\r\n          positionOnMap();\r\n        } else {\r\n          setTimeout(() => positionOnMap());\r\n        }\r\n      }\r\n    }\r\n\r\n    setZIndex(zIndex: string): void {\r\n      zIndex && (this.zIndex = zIndex); /* jshint ignore:line */\r\n      this.htmlEl.style.zIndex = this.zIndex;\r\n    }\r\n\r\n    setVisible(visible: boolean) {\r\n      this.htmlEl.style.display = visible ? 'inline-block' : 'none';\r\n      this.visible = visible;\r\n    }\r\n  }\r\n\r\n  return new CustomMarkerOverlayView(htmlEl, position);\r\n}\r\n\r\n@Component({\r\n  selector: 'ngui-map > custom-marker',\r\n  inputs: INPUTS,\r\n  outputs: OUTPUTS,\r\n  template: `\r\n    <ng-content></ng-content>\r\n  `,\r\n})\r\n\r\nexport class CustomMarker implements OnInit, OnDestroy, OnChanges {\n  // declare INPUTS for AOT compiler\n  public position: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n  public animationChanged: any; // generated by ngc-pre-compiler.js\n  public click: any; // generated by ngc-pre-compiler.js\n  public clickableChanged: any; // generated by ngc-pre-compiler.js\n  public cursorChanged: any; // generated by ngc-pre-compiler.js\n  public dblclick: any; // generated by ngc-pre-compiler.js\n  public drag: any; // generated by ngc-pre-compiler.js\n  public dragend: any; // generated by ngc-pre-compiler.js\n  public draggableChanged: any; // generated by ngc-pre-compiler.js\n  public dragstart: any; // generated by ngc-pre-compiler.js\n  public flatChanged: any; // generated by ngc-pre-compiler.js\n  public iconChanged: any; // generated by ngc-pre-compiler.js\n  public mousedown: any; // generated by ngc-pre-compiler.js\n  public mouseout: any; // generated by ngc-pre-compiler.js\n  public mouseover: any; // generated by ngc-pre-compiler.js\n  public mouseup: any; // generated by ngc-pre-compiler.js\n  public positionChanged: any; // generated by ngc-pre-compiler.js\n  public rightclick: any; // generated by ngc-pre-compiler.js\n  public shapeChanged: any; // generated by ngc-pre-compiler.js\n  public titleChanged: any; // generated by ngc-pre-compiler.js\n  public visibleChanged: any; // generated by ngc-pre-compiler.js\n  public zindexChanged: any; // generated by ngc-pre-compiler.js\n  public map_click: any; // generated by ngc-pre-compiler.js\n  public map_mouseover: any; // generated by ngc-pre-compiler.js\n  public map_mouseout: any; // generated by ngc-pre-compiler.js\n  public map_mouseup: any; // generated by ngc-pre-compiler.js\n  public map_mousedown: any; // generated by ngc-pre-compiler.js\n  public map_drag: any; // generated by ngc-pre-compiler.js\n  public map_dragend: any; // generated by ngc-pre-compiler.js\n\r\n  @Output() initialized$: EventEmitter<any> = new EventEmitter();\r\n\r\n  public inputChanges$ = new Subject();\r\n\r\n  private el: HTMLElement;\r\n  private mapObject: any;\r\n\r\n  constructor(private nguiMapComponent: NguiMapComponent,\r\n              private elementRef: ElementRef,\r\n              private nguiMap: NguiMap) {\r\n    this.elementRef.nativeElement.style.display = 'none';\r\n    OUTPUTS.forEach(output => this[output] = new EventEmitter());\r\n  }\r\n\r\n  // Initialize this map object when map is ready\r\n  ngOnInit() {\r\n    if (this.nguiMapComponent.mapIdledOnce) { // map is ready already\r\n      this.initialize();\r\n    } else {\r\n      this.nguiMapComponent.mapReady$.subscribe(map => this.initialize());\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this.inputChanges$.next(changes);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.inputChanges$.complete();\r\n    this.nguiMapComponent.removeFromMapObjectGroup('CustomMarker', this.mapObject);\r\n\r\n    if (this.mapObject) {\r\n      this.nguiMap.clearObjectEvents(OUTPUTS, this, 'mapObject');\r\n    }\r\n  }\r\n\r\n  private initialize(): void {\r\n\r\n    this.el = this.elementRef.nativeElement;\r\n\r\n    this.mapObject = getCustomMarkerOverlayView(this.el, this['position']);\r\n    this.mapObject.setMap(this.nguiMapComponent.map);\r\n\r\n    // set google events listeners and emits to this outputs listeners\r\n    this.nguiMap.setObjectEvents(OUTPUTS, this, 'mapObject');\r\n\r\n    // update object when input changes\r\n    this.inputChanges$.pipe(\r\n      debounceTime(1000),\r\n      tap((changes: SimpleChanges) => this.nguiMap.updateGoogleObject(this.mapObject, changes)),\r\n    ).subscribe();\r\n\r\n    this.nguiMapComponent.addToMapObjectGroup('CustomMarker', this.mapObject);\r\n    this.initialized$.emit(this.mapObject);\r\n  }\r\n\r\n}\r\n",
    "import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst INPUTS = [\n  'center', 'clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'map', 'radius',\n  'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight', 'visible', 'zIndex', 'options',\n  // ngui-map specific inputs\n  'geoFallbackCenter'\n];\nconst OUTPUTS = [\n  'centerChanged', 'click', 'dblclick', 'drag', 'dragend', 'dragstart',\n  'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'radiusChanged', 'rightclick',\n];\n\n@Directive({\n  selector: 'ngui-map>circle, ngui-map>map-circle',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class Circle extends BaseMapDirective {\n  // declare INPUTS for AOT compiler\n  public center: any; // generated by ngc-pre-compiler.js\n  public clickable: any; // generated by ngc-pre-compiler.js\n  public draggable: any; // generated by ngc-pre-compiler.js\n  public editable: any; // generated by ngc-pre-compiler.js\n  public fillColor: any; // generated by ngc-pre-compiler.js\n  public fillOpacity: any; // generated by ngc-pre-compiler.js\n  public map: any; // generated by ngc-pre-compiler.js\n  public radius: any; // generated by ngc-pre-compiler.js\n  public strokeColor: any; // generated by ngc-pre-compiler.js\n  public strokeOpacity: any; // generated by ngc-pre-compiler.js\n  public strokePosition: any; // generated by ngc-pre-compiler.js\n  public strokeWeight: any; // generated by ngc-pre-compiler.js\n  public visible: any; // generated by ngc-pre-compiler.js\n  public zIndex: any; // generated by ngc-pre-compiler.js\n  public options: any; // generated by ngc-pre-compiler.js\n  public geoFallbackCenter: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n  public centerChanged: any; // generated by ngc-pre-compiler.js\n  public click: any; // generated by ngc-pre-compiler.js\n  public dblclick: any; // generated by ngc-pre-compiler.js\n  public drag: any; // generated by ngc-pre-compiler.js\n  public dragend: any; // generated by ngc-pre-compiler.js\n  public dragstart: any; // generated by ngc-pre-compiler.js\n  public mousedown: any; // generated by ngc-pre-compiler.js\n  public mousemove: any; // generated by ngc-pre-compiler.js\n  public mouseout: any; // generated by ngc-pre-compiler.js\n  public mouseover: any; // generated by ngc-pre-compiler.js\n  public mouseup: any; // generated by ngc-pre-compiler.js\n  public radiusChanged: any; // generated by ngc-pre-compiler.js\n  public rightclick: any; // generated by ngc-pre-compiler.js\n\n  public mapObject: google.maps.Circle;\n  public objectOptions: google.maps.CircleOptions = <google.maps.CircleOptions>{};\n\n  constructor(private nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'Circle', INPUTS, OUTPUTS);\n  }\n\n  initialize(): void {\n    super.initialize();\n    this.setCenter();\n  }\n\n  setCenter(): void {\n    if (!this['center']) {\n      this._subscriptions.push(this.nguiMapComp.geolocation.getCurrentPosition().subscribe(\n        center => {\n\n          let latLng = new google.maps.LatLng(center.coords.latitude, center.coords.longitude);\n          this.mapObject.setCenter(latLng);\n        },\n        error => {\n          console.error('ngui-map, error in finding the current position');\n          this.mapObject.setCenter(this.objectOptions['geoFallbackCenter'] || new google.maps.LatLng(0, 0));\n        }\n      ));\n    } else if (typeof this['center'] === 'string') {\n      this._subscriptions.push(this.nguiMapComp.geoCoder.geocode({address: this['center']}).subscribe(\n        results => {\n\n          this.mapObject.setCenter(results[0].geometry.location);\n        },\n        error => {\n          console.error('ngui-map, error in finding location from', this['center']);\n          this.mapObject.setCenter(this.objectOptions['geoFallbackCenter'] || new google.maps.LatLng(0, 0));\n        }\n      ));\n    }\n  }\n}\n",
    "import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst INPUTS = ['controlPosition', 'controls', 'drawingMode', 'featureFactory', 'style', 'geoJson', 'geoJsonUrl'];\nconst OUTPUTS = [\n  'addfeature', 'click', 'dblclick', 'mousedown', 'mouseout', 'mouseover',\n  'mouseup', 'removefeature', 'removeproperty', 'rightclick', 'setgeometry', 'setproperty'\n];\n\n@Directive({\n  selector: 'ngui-map > data-layer',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class DataLayer extends BaseMapDirective {\n  // declare INPUTS for AOT compiler\n  public controlPosition: any; // generated by ngc-pre-compiler.js\n  public controls: any; // generated by ngc-pre-compiler.js\n  public drawingMode: any; // generated by ngc-pre-compiler.js\n  public featureFactory: any; // generated by ngc-pre-compiler.js\n  public style: any; // generated by ngc-pre-compiler.js\n  public geoJson: any; // generated by ngc-pre-compiler.js\n  public geoJsonUrl: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n  public addfeature: any; // generated by ngc-pre-compiler.js\n  public click: any; // generated by ngc-pre-compiler.js\n  public dblclick: any; // generated by ngc-pre-compiler.js\n  public mousedown: any; // generated by ngc-pre-compiler.js\n  public mouseout: any; // generated by ngc-pre-compiler.js\n  public mouseover: any; // generated by ngc-pre-compiler.js\n  public mouseup: any; // generated by ngc-pre-compiler.js\n  public removefeature: any; // generated by ngc-pre-compiler.js\n  public removeproperty: any; // generated by ngc-pre-compiler.js\n  public rightclick: any; // generated by ngc-pre-compiler.js\n  public setgeometry: any; // generated by ngc-pre-compiler.js\n  public setproperty: any; // generated by ngc-pre-compiler.js\n\n  constructor(nguiMapComponent: NguiMapComponent) {\n    super(nguiMapComponent, 'Data', INPUTS, OUTPUTS);\n  }\n\n  // only called when map is ready\n  initialize(): void {\n    if (this['geoJson']) {\n      // addGeoJson from an object\n\n      this.nguiMapComponent.map.data.addGeoJson(this['geoJson']);\n    } else if (this['geoJsonUrl']) {\n      // loadGeoJson from a URL\n\n      this.nguiMapComponent.map.data.loadGeoJson(this['geoJsonUrl']);\n    }\n    else {\n      this.objectOptions = this.optionBuilder.googlizeAllInputs(this.inputs, this);\n\n      this.nguiMapComponent.map.data.add(this.objectOptions);\n    }\n\n    // unlike others, data belongs to map. e.g., map.data.loadGeoJson(), map.data.add()\n    this.mapObject = this.nguiMapComponent.map.data;\n\n    // set google events listeners and emits to this outputs listeners\n    this.nguiMap.setObjectEvents(this.outputs, this, 'mapObject');\n\n    this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName, this.mapObject);\n    this.initialized$.emit(this.mapObject);\n  }\n}",
    "import { Input, Directive, SimpleChanges, OnChanges, OnDestroy } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\nimport { NavigatorGeolocation } from '../services/navigator-geolocation';\n\nconst INPUTS = [\n  'directions', 'draggable', 'hideRouteList', 'infoWindow', 'panel', 'markerOptions',\n  'polylineOptions', 'preserveViewport', 'routeIndex', 'suppressBicyclingLayer',\n  'suppressInfoWindows', 'suppressMarkers', 'suppressPolylines'\n];\nconst OUTPUTS = ['directions_changed'];\n\n@Directive({\n  selector: 'ngui-map > directions-renderer',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class DirectionsRenderer extends BaseMapDirective implements OnChanges, OnDestroy {\n  // declare INPUTS for AOT compiler\n  public directions: any; // generated by ngc-pre-compiler.js\n  public draggable: any; // generated by ngc-pre-compiler.js\n  public hideRouteList: any; // generated by ngc-pre-compiler.js\n  public infoWindow: any; // generated by ngc-pre-compiler.js\n  public panel: any; // generated by ngc-pre-compiler.js\n  public markerOptions: any; // generated by ngc-pre-compiler.js\n  public polylineOptions: any; // generated by ngc-pre-compiler.js\n  public preserveViewport: any; // generated by ngc-pre-compiler.js\n  public routeIndex: any; // generated by ngc-pre-compiler.js\n  public suppressBicyclingLayer: any; // generated by ngc-pre-compiler.js\n  public suppressInfoWindows: any; // generated by ngc-pre-compiler.js\n  public suppressMarkers: any; // generated by ngc-pre-compiler.js\n  public suppressPolylines: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n  public directions_changed: any; // generated by ngc-pre-compiler.js\n\n  // tslint:disable-next-line\n  @Input('directions-request') directionsRequest: google.maps.DirectionsRequest;\n\n  directionsService: google.maps.DirectionsService;\n  directionsRenderer: google.maps.DirectionsRenderer;\n\n  constructor(\n    nguiMapComponent: NguiMapComponent,\n    public geolocation: NavigatorGeolocation\n  ) {\n    super(nguiMapComponent, 'DirectionsRenderer', INPUTS, OUTPUTS);\n  }\n\n  // only called when map is ready\n  initialize(): void {\n    this.objectOptions = this.optionBuilder.googlizeAllInputs(this.inputs, this);\n    if (typeof this.objectOptions['panel'] === 'string') { // find a Node for panel\n      this.objectOptions['panel'] = document.querySelector(this.objectOptions['panel']);\n    }\n\n\n\n    this.directionsService = new google.maps.DirectionsService();\n    this.directionsRenderer = new google.maps.DirectionsRenderer(this.objectOptions);\n\n    this.directionsRenderer.setMap(this.nguiMapComponent.map);\n\n    // set google events listeners and emidirectionsRenderer to this outputs listeners\n    this.showDirections(this.directionsRequest);\n\n    this.nguiMap.setObjectEvents(this.outputs, this, 'directionsRenderer');\n\n    this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName, this.mapObject);\n    this.initialized$.emit(this.directionsRenderer);\n  }\n\n\n  ngOnChanges(changes: SimpleChanges) {\n    let newOptions = {};\n    for (let key in changes) {\n      if (this.inputs.indexOf(key) !== -1) {\n        newOptions[key] = this.optionBuilder.googlize(changes[key].currentValue);\n      }\n    }\n    if (changes['directionsRequest'] && this.directionsRenderer) {\n      this.directionsService && this.showDirections(this.directionsRequest);\n    }\n  }\n\n  showDirections(directionsRequest: google.maps.DirectionsRequest) {\n    this.directionsService.route(directionsRequest,\n      (response: any, status: any) =>  {\n        // in some-case the callback is called during destroy component,\n        // we should make sure directionsRenderer is still defined (cancelling `route` callback is not possible).\n        if (!this.directionsRenderer) {\n          return;\n        }\n\n        if (status === google.maps.DirectionsStatus.OK) {\n          this.directionsRenderer.setDirections(response);\n        } else {\n          console.error('Directions request failed due to ' + status);\n        }\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this.nguiMap.clearObjectEvents(this.outputs, this, 'directionsRenderer');\n  }\n}",
    "import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst INPUTS = [\n  'options',\n  'circleOptions', 'drawingControl', 'drawingControlOptions', 'drawingMode',\n  'map', 'markerOptions', 'polygonOptions', 'polylineOptions', 'rectangleOptions'\n];\nconst OUTPUTS = [\n  'circlecomplete', 'markercomplete', 'overlaycomplete',\n  'polygoncomplete', 'polylinecomplete', 'rectanglecomplete'\n];\n\n@Directive({\n  selector: 'ngui-map > drawing-manager',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class DrawingManager extends BaseMapDirective {\n  // declare INPUTS for AOT compiler\n  public options: any; // generated by ngc-pre-compiler.js\n  public circleOptions: any; // generated by ngc-pre-compiler.js\n  public drawingControl: any; // generated by ngc-pre-compiler.js\n  public drawingControlOptions: any; // generated by ngc-pre-compiler.js\n  public drawingMode: any; // generated by ngc-pre-compiler.js\n  public map: any; // generated by ngc-pre-compiler.js\n  public markerOptions: any; // generated by ngc-pre-compiler.js\n  public polygonOptions: any; // generated by ngc-pre-compiler.js\n  public polylineOptions: any; // generated by ngc-pre-compiler.js\n  public rectangleOptions: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n  public circlecomplete: any; // generated by ngc-pre-compiler.js\n  public markercomplete: any; // generated by ngc-pre-compiler.js\n  public overlaycomplete: any; // generated by ngc-pre-compiler.js\n  public polygoncomplete: any; // generated by ngc-pre-compiler.js\n  public polylinecomplete: any; // generated by ngc-pre-compiler.js\n  public rectanglecomplete: any; // generated by ngc-pre-compiler.js\n\n  constructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'DrawingManager', INPUTS, OUTPUTS);\n    this.libraryName = 'drawing';\n  }\n}\n",
    "import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst INPUTS = [ 'url', 'bounds', 'clickable', 'opacity' ];\nconst OUTPUTS = [ 'click', 'dblclick' ];\n\n@Directive({\n  selector: 'ngui-map > ground-overlay',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class GroundOverlay extends BaseMapDirective {\n  // declare INPUTS for AOT compiler\n  public url: any; // generated by ngc-pre-compiler.js\n  public bounds: any; // generated by ngc-pre-compiler.js\n  public clickable: any; // generated by ngc-pre-compiler.js\n  public opacity: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n  public click: any; // generated by ngc-pre-compiler.js\n  public dblclick: any; // generated by ngc-pre-compiler.js\n\n  public mapObject: google.maps.GroundOverlay;\n  public objectOptions: google.maps.GroundOverlayOptions = <google.maps.GroundOverlayOptions>{};\n\n  constructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'GroundOverlay', INPUTS, OUTPUTS);\n  }\n\n  // re-declaring initialize function. called when map is ready\n  initialize(): void {\n    // url, bounds are not the options of GroundOverlay\n    this.objectOptions = this.optionBuilder.googlizeAllInputs(['clickable', 'opacity'], this);\n\n\n    // noinspection TypeScriptUnresolvedFunction\n    this.mapObject = new google.maps.GroundOverlay(this['url'], this['bounds'], this.objectOptions);\n    this.mapObject.setMap(this.nguiMapComponent.map);\n    this.mapObject['mapObjectName'] = this.mapObjectName;\n\n    // set google events listeners and emits to this outputs listeners\n    this.nguiMap.setObjectEvents(this.outputs, this, 'mapObject');\n\n    this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName, this.mapObject);\n    this.initialized$.emit(this.mapObject);\n  }\n}\n\n",
    "import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst INPUTS = [ 'data', 'dissipating', 'gradient', 'maxIntensity', 'opacity', 'radius', 'options' ];\nconst OUTPUTS = [];\n\n@Directive({\n  selector: 'ngui-map > heatmap-layer',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class HeatmapLayer extends BaseMapDirective {\n  // declare INPUTS for AOT compiler\n  public data: any; // generated by ngc-pre-compiler.js\n  public dissipating: any; // generated by ngc-pre-compiler.js\n  public gradient: any; // generated by ngc-pre-compiler.js\n  public maxIntensity: any; // generated by ngc-pre-compiler.js\n  public opacity: any; // generated by ngc-pre-compiler.js\n  public radius: any; // generated by ngc-pre-compiler.js\n  public options: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n\n\n  public libraryName = 'visualization';\n\n  constructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'HeatmapLayer', INPUTS, OUTPUTS);\n  }\n}\n",
    "import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst INPUTS = [ 'clickable', 'preserveViewport', 'screenOverlays', 'suppressInfoWindows', 'url', 'zIndex', 'options' ];\nconst OUTPUTS = [ 'click', 'defaultviewport_changed', 'status_changed' ];\n\n@Directive({\n  selector: 'ngui-map > kml-layer',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class KmlLayer extends BaseMapDirective {\n  // declare INPUTS for AOT compiler\n  public clickable: any; // generated by ngc-pre-compiler.js\n  public preserveViewport: any; // generated by ngc-pre-compiler.js\n  public screenOverlays: any; // generated by ngc-pre-compiler.js\n  public suppressInfoWindows: any; // generated by ngc-pre-compiler.js\n  public url: any; // generated by ngc-pre-compiler.js\n  public zIndex: any; // generated by ngc-pre-compiler.js\n  public options: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n  public click: any; // generated by ngc-pre-compiler.js\n  public defaultviewport_changed: any; // generated by ngc-pre-compiler.js\n  public status_changed: any; // generated by ngc-pre-compiler.js\n\n  constructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'KmlLayer', INPUTS, OUTPUTS);\n  }\n}\n",
    "import {Directive, OnInit} from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst INPUTS = [\n  'anchorPoint', 'animation', 'clickable', 'cursor', 'draggable', 'icon', 'label', 'opacity',\n  'optimized', 'place', 'position', 'shape', 'title', 'visible', 'zIndex', 'options',\n  // ngui-map specific inputs\n  'geoFallbackPosition'\n];\nconst OUTPUTS = [\n  'animationChanged', 'click', 'clickableChanged', 'cursorChanged', 'dblclick', 'drag', 'dragend', 'draggableChanged',\n  'dragstart', 'flatChanged', 'iconChanged', 'mousedown', 'mouseout', 'mouseover', 'mouseup', 'positionChanged', 'rightclick',\n  'shapeChanged', 'titleChanged', 'visibleChanged', 'zindexChanged'\n];\n\n@Directive({\n  selector: 'ngui-map > marker',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class Marker extends BaseMapDirective implements OnInit {\n  // declare INPUTS for AOT compiler\n  public anchorPoint: any; // generated by ngc-pre-compiler.js\n  public animation: any; // generated by ngc-pre-compiler.js\n  public clickable: any; // generated by ngc-pre-compiler.js\n  public cursor: any; // generated by ngc-pre-compiler.js\n  public draggable: any; // generated by ngc-pre-compiler.js\n  public icon: any; // generated by ngc-pre-compiler.js\n  public label: any; // generated by ngc-pre-compiler.js\n  public opacity: any; // generated by ngc-pre-compiler.js\n  public optimized: any; // generated by ngc-pre-compiler.js\n  public place: any; // generated by ngc-pre-compiler.js\n  public position: any; // generated by ngc-pre-compiler.js\n  public shape: any; // generated by ngc-pre-compiler.js\n  public title: any; // generated by ngc-pre-compiler.js\n  public visible: any; // generated by ngc-pre-compiler.js\n  public zIndex: any; // generated by ngc-pre-compiler.js\n  public options: any; // generated by ngc-pre-compiler.js\n  public geoFallbackPosition: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n  public animationChanged: any; // generated by ngc-pre-compiler.js\n  public click: any; // generated by ngc-pre-compiler.js\n  public clickableChanged: any; // generated by ngc-pre-compiler.js\n  public cursorChanged: any; // generated by ngc-pre-compiler.js\n  public dblclick: any; // generated by ngc-pre-compiler.js\n  public drag: any; // generated by ngc-pre-compiler.js\n  public dragend: any; // generated by ngc-pre-compiler.js\n  public draggableChanged: any; // generated by ngc-pre-compiler.js\n  public dragstart: any; // generated by ngc-pre-compiler.js\n  public flatChanged: any; // generated by ngc-pre-compiler.js\n  public iconChanged: any; // generated by ngc-pre-compiler.js\n  public mousedown: any; // generated by ngc-pre-compiler.js\n  public mouseout: any; // generated by ngc-pre-compiler.js\n  public mouseover: any; // generated by ngc-pre-compiler.js\n  public mouseup: any; // generated by ngc-pre-compiler.js\n  public positionChanged: any; // generated by ngc-pre-compiler.js\n  public rightclick: any; // generated by ngc-pre-compiler.js\n  public shapeChanged: any; // generated by ngc-pre-compiler.js\n  public titleChanged: any; // generated by ngc-pre-compiler.js\n  public visibleChanged: any; // generated by ngc-pre-compiler.js\n  public zindexChanged: any; // generated by ngc-pre-compiler.js\n\n  public mapObject: google.maps.Marker;\n  public objectOptions: google.maps.MarkerOptions = <google.maps.MarkerOptions>{};\n\n  constructor(private nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'Marker', INPUTS, OUTPUTS);\n\n  }\n\n  // Initialize this map object when map is ready\n  ngOnInit() {\n    if (this.nguiMapComponent.mapIdledOnce) { // map is ready already\n      this.initialize();\n    } else {\n      this.nguiMapComponent.mapReady$.subscribe(map => this.initialize());\n    }\n  }\n\n  initialize(): void {\n    super.initialize();\n    this.setPosition();\n  }\n\n  setPosition(): void {\n    if (!this['position']) {\n      this._subscriptions.push(this.nguiMapComp.geolocation.getCurrentPosition().subscribe(\n        position => {\n\n          let latLng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);\n          this.mapObject.setPosition(latLng);\n        },\n        error => {\n          console.error('ngui-map, error finding the current location');\n          this.mapObject.setPosition(this.objectOptions['geoFallbackPosition'] || new google.maps.LatLng(0, 0));\n        }\n      ));\n    } else if (typeof this['position'] === 'string') {\n      this._subscriptions.push(this.nguiMapComp.geoCoder.geocode({address: this['position']}).subscribe(\n        results => {\n\n          this.mapObject.setPosition(results[0].geometry.location);\n        },\n        error => {\n          console.error('ngui-map, error finding the location from', this['position']);\n          this.mapObject.setPosition(this.objectOptions['geoFallbackPosition'] || new google.maps.LatLng(0, 0));\n        }\n      ));\n    }\n  }\n}\n",
    "import {\n  Input,\n  Output,\n  Directive,\n  EventEmitter,\n  ElementRef,\n} from '@angular/core';\n\nimport { NgMapApiLoader } from '../services/api-loader';\nimport { OptionBuilder } from '../services/option-builder';\nimport { missingLibraryError } from '../services/util';\nimport { first } from 'rxjs/operators';\n\n@Directive({\n  selector: '[places-auto-complete]'\n})\nexport class PlacesAutoComplete {\n  @Input() bounds: any;\n  @Input() componentRestrictions: any;\n  @Input() types: string[];\n\n  @Output('place_changed') place_changed: EventEmitter<any> = new EventEmitter();\n  @Output() initialized$: EventEmitter<any> = new EventEmitter();\n\n  public objectOptions: any;\n  public autocomplete: google.maps.places.Autocomplete;\n\n  constructor(\n    public optionBuilder: OptionBuilder,\n    public elementRef: ElementRef,\n    public apiLoader: NgMapApiLoader,\n  ) {\n    apiLoader.load();\n    apiLoader.api$\n      .pipe(first())\n      .subscribe(() => this.initialize());\n  }\n\n  // only called when map is ready\n  initialize = (): void => {\n    this.objectOptions =\n      this.optionBuilder.googlizeAllInputs(['bounds', 'componentRestrictions', 'types'], this);\n\n\n    if (!google.maps.places) {\n      throw missingLibraryError('PlacesAutoComplete', 'places');\n    }\n\n    this.autocomplete = new google.maps.places.Autocomplete(\n      this.elementRef.nativeElement,\n      this.objectOptions\n    );\n\n\n    this.autocomplete.addListener('place_changed', place => {\n      this.place_changed.emit(this.autocomplete.getPlace());\n    });\n\n    this.initialized$.emit(this.autocomplete);\n  }\n}\n",
    "import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst INPUTS = [\n  'clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'geodesic', 'paths',\n  'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight', 'visible', 'zIndex', 'options',\n];\nconst OUTPUTS = [\n  'click', 'dblclick', 'drag', 'dragend', 'dragstart', 'mousedown',\n  'mousemove', 'mouseout', 'mouseover', 'mouseup', 'rightclick',\n];\n\n@Directive({\n  selector: 'ngui-map>polygon, ngui-map>map-polygon',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class Polygon extends BaseMapDirective {\n  // declare INPUTS for AOT compiler\n  public clickable: any; // generated by ngc-pre-compiler.js\n  public draggable: any; // generated by ngc-pre-compiler.js\n  public editable: any; // generated by ngc-pre-compiler.js\n  public fillColor: any; // generated by ngc-pre-compiler.js\n  public fillOpacity: any; // generated by ngc-pre-compiler.js\n  public geodesic: any; // generated by ngc-pre-compiler.js\n  public paths: any; // generated by ngc-pre-compiler.js\n  public strokeColor: any; // generated by ngc-pre-compiler.js\n  public strokeOpacity: any; // generated by ngc-pre-compiler.js\n  public strokePosition: any; // generated by ngc-pre-compiler.js\n  public strokeWeight: any; // generated by ngc-pre-compiler.js\n  public visible: any; // generated by ngc-pre-compiler.js\n  public zIndex: any; // generated by ngc-pre-compiler.js\n  public options: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n  public click: any; // generated by ngc-pre-compiler.js\n  public dblclick: any; // generated by ngc-pre-compiler.js\n  public drag: any; // generated by ngc-pre-compiler.js\n  public dragend: any; // generated by ngc-pre-compiler.js\n  public dragstart: any; // generated by ngc-pre-compiler.js\n  public mousedown: any; // generated by ngc-pre-compiler.js\n  public mousemove: any; // generated by ngc-pre-compiler.js\n  public mouseout: any; // generated by ngc-pre-compiler.js\n  public mouseover: any; // generated by ngc-pre-compiler.js\n  public mouseup: any; // generated by ngc-pre-compiler.js\n  public rightclick: any; // generated by ngc-pre-compiler.js\n\n  constructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'Polygon', INPUTS, OUTPUTS);\n  }\n}\n",
    "import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst INPUTS = [\n  'clickable', 'draggable', 'editable', 'geodesic', 'icons', 'path', 'strokeColor',\n  'strokeOpacity', 'strokeWeight', 'visible', 'zIndex', 'options'\n];\nconst OUTPUTS = [\n  'click', 'dblclick', 'drag', 'dragend', 'dragstart', 'mousedown',\n  'mousemove', 'mouseout', 'mouseover', 'mouseup', 'rightclick'\n];\n\n@Directive({\n  selector: 'ngui-map > polyline',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class Polyline extends BaseMapDirective {\n  // declare INPUTS for AOT compiler\n  public clickable: any; // generated by ngc-pre-compiler.js\n  public draggable: any; // generated by ngc-pre-compiler.js\n  public editable: any; // generated by ngc-pre-compiler.js\n  public geodesic: any; // generated by ngc-pre-compiler.js\n  public icons: any; // generated by ngc-pre-compiler.js\n  public path: any; // generated by ngc-pre-compiler.js\n  public strokeColor: any; // generated by ngc-pre-compiler.js\n  public strokeOpacity: any; // generated by ngc-pre-compiler.js\n  public strokeWeight: any; // generated by ngc-pre-compiler.js\n  public visible: any; // generated by ngc-pre-compiler.js\n  public zIndex: any; // generated by ngc-pre-compiler.js\n  public options: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n  public click: any; // generated by ngc-pre-compiler.js\n  public dblclick: any; // generated by ngc-pre-compiler.js\n  public drag: any; // generated by ngc-pre-compiler.js\n  public dragend: any; // generated by ngc-pre-compiler.js\n  public dragstart: any; // generated by ngc-pre-compiler.js\n  public mousedown: any; // generated by ngc-pre-compiler.js\n  public mousemove: any; // generated by ngc-pre-compiler.js\n  public mouseout: any; // generated by ngc-pre-compiler.js\n  public mouseover: any; // generated by ngc-pre-compiler.js\n  public mouseup: any; // generated by ngc-pre-compiler.js\n  public rightclick: any; // generated by ngc-pre-compiler.js\n\n  constructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'Polyline', INPUTS, OUTPUTS);\n  }\n}\n\n",
    "import {Directive, OnDestroy} from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst INPUTS = [\n  'selector', 'options',\n  'addressControl', 'addressControlOptions', 'clickToGo', 'disableDefaultUI', 'disableDoubleClickZoom',\n  'enableCloseButton', 'fullscreenControl', 'fullscreenControlOptions', 'imageDateControl', 'linksControl',\n  'motionTracking', 'motionTrackingControl', 'panControl', 'panControlOptions', 'pano',\n  'position', 'pov', 'scrollwheel', 'showRoadLabels', 'visible', 'zoomControl', 'zoomControlOptions'\n];\nconst OUTPUTS = [\n  'closeclick', 'pano_changed', 'position_changed', 'pov_changed', 'resize', 'status_changed',\n  'visible_changed', 'zoom_changed'\n];\n\n@Directive({\n  selector: 'ngui-map > street-view-panorama',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class StreetViewPanorama extends BaseMapDirective implements OnDestroy {\n  // declare INPUTS for AOT compiler\n  public selector: any; // generated by ngc-pre-compiler.js\n  public options: any; // generated by ngc-pre-compiler.js\n  public addressControl: any; // generated by ngc-pre-compiler.js\n  public addressControlOptions: any; // generated by ngc-pre-compiler.js\n  public clickToGo: any; // generated by ngc-pre-compiler.js\n  public disableDefaultUI: any; // generated by ngc-pre-compiler.js\n  public disableDoubleClickZoom: any; // generated by ngc-pre-compiler.js\n  public enableCloseButton: any; // generated by ngc-pre-compiler.js\n  public fullscreenControl: any; // generated by ngc-pre-compiler.js\n  public fullscreenControlOptions: any; // generated by ngc-pre-compiler.js\n  public imageDateControl: any; // generated by ngc-pre-compiler.js\n  public linksControl: any; // generated by ngc-pre-compiler.js\n  public motionTracking: any; // generated by ngc-pre-compiler.js\n  public motionTrackingControl: any; // generated by ngc-pre-compiler.js\n  public panControl: any; // generated by ngc-pre-compiler.js\n  public panControlOptions: any; // generated by ngc-pre-compiler.js\n  public pano: any; // generated by ngc-pre-compiler.js\n  public position: any; // generated by ngc-pre-compiler.js\n  public pov: any; // generated by ngc-pre-compiler.js\n  public scrollwheel: any; // generated by ngc-pre-compiler.js\n  public showRoadLabels: any; // generated by ngc-pre-compiler.js\n  public visible: any; // generated by ngc-pre-compiler.js\n  public zoomControl: any; // generated by ngc-pre-compiler.js\n  public zoomControlOptions: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n  public closeclick: any; // generated by ngc-pre-compiler.js\n  public pano_changed: any; // generated by ngc-pre-compiler.js\n  public position_changed: any; // generated by ngc-pre-compiler.js\n  public pov_changed: any; // generated by ngc-pre-compiler.js\n  public resize: any; // generated by ngc-pre-compiler.js\n  public status_changed: any; // generated by ngc-pre-compiler.js\n  public visible_changed: any; // generated by ngc-pre-compiler.js\n  public zoom_changed: any; // generated by ngc-pre-compiler.js\n\n  constructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'StreetViewPanorama', INPUTS, OUTPUTS);\n  }\n\n  // only called when map is ready\n  initialize(): void {\n    this.objectOptions = this.optionBuilder.googlizeAllInputs(this.inputs, this);\n\n\n    let element: HTMLElement;\n    if (this.objectOptions.selector) {\n      // noinspection TypeScriptValidateTypes\n      element = document.querySelector(this['selector']);\n      delete this.objectOptions.selector;\n    } else {\n      element = this.nguiMapComponent.el;\n    }\n\n    // will be set after geocoded\n    typeof this.objectOptions.position === 'string' && (delete this.objectOptions.position);\n\n    this.mapObject = new google.maps[this.mapObjectName](element, this.objectOptions);\n    this.mapObject['mapObjectName'] = this.mapObjectName;\n    this.mapObject['nguiMapComponent'] = this.nguiMapComponent;\n\n    // set google events listeners and emits to this outputs listeners\n    this.nguiMap.setObjectEvents(this.outputs, this, 'mapObject');\n\n    this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName, this.mapObject);\n    this.initialized$.emit(this.mapObject);\n  }\n\n  // When destroyed, remove event listener, and delete this object to prevent memory leak\n  ngOnDestroy() {\n    if (this.nguiMapComponent.el) {\n      this.nguiMap.clearObjectEvents(this.outputs, this, 'mapObject');\n    }\n  }\n}",
    "import { Directive } from '@angular/core';\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst INPUTS = ['autoRefresh', 'options' ];\nconst OUTPUTS = [ ];\n\n@Directive({\n  selector: 'ngui-map > traffic-layer',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class TrafficLayer extends BaseMapDirective {\n  // declare INPUTS for AOT compiler\n  public autoRefresh: any; // generated by ngc-pre-compiler.js\n  public options: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n\n\n  constructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'TrafficLayer', INPUTS, OUTPUTS);\n  }\n}",
    "import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst INPUTS = [];\nconst OUTPUTS = [ ];\n\n@Directive({\n  selector: 'ngui-map > transit-layer',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class TransitLayer extends BaseMapDirective {\n  // declare INPUTS for AOT compiler\n\n\n  // declare OUTPUTS for AOT compiler\n\n\n  constructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'TransitLayer', INPUTS, OUTPUTS);\n  }\n}",
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OptionBuilder } from './services/option-builder';\nimport { GeoCoder } from './services/geo-coder';\nimport { NavigatorGeolocation } from './services/navigator-geolocation';\nimport { NG_MAP_CONFIG_TOKEN, ConfigOption } from './services/config';\nimport { NgMapApiLoader, NgMapAsyncCallbackApiLoader } from './services/api-loader';\n\nimport { NguiMapComponent } from './components/ngui-map.component';\nimport { InfoWindow } from './components/info-window';\nimport { CustomMarker } from './components/custom-marker';\n\nimport { BicyclingLayer } from './directives/bicycling-layer';\nimport { Circle } from './directives/circle';\nimport { DataLayer } from './directives/data-layer';\nimport { DirectionsRenderer } from './directives/directions-renderer';\nimport { DrawingManager } from './directives/drawing-manager';\nimport { GroundOverlay } from './directives/ground-overlay';\nimport { HeatmapLayer } from './directives/heatmap-layer';\nimport { KmlLayer } from './directives/kml-layer';\nimport { Marker } from './directives/marker';\nimport { NguiMap } from './services/ngui-map';\nimport { PlacesAutoComplete } from './directives/places-auto-complete';\nimport { Polygon } from './directives/polygon';\nimport { Polyline } from './directives/polyline';\nimport { StreetViewPanorama } from './directives/street-view-panorama';\nimport { TrafficLayer } from './directives/traffic-layer';\nimport { TransitLayer } from './directives/transit-layer';\n\nconst COMPONENTS_DIRECTIVES = [\n  NguiMapComponent, InfoWindow,\n  Marker, Circle, CustomMarker, Polygon, InfoWindow, Polyline, GroundOverlay,\n  TransitLayer, TrafficLayer, HeatmapLayer, BicyclingLayer, KmlLayer, DataLayer,\n  StreetViewPanorama, PlacesAutoComplete, DirectionsRenderer,\n  DrawingManager,\n];\n\n@NgModule({\n  imports: [ CommonModule ],\n  declarations: COMPONENTS_DIRECTIVES,\n  exports: [COMPONENTS_DIRECTIVES],\n  providers: [\n    GeoCoder,\n    NavigatorGeolocation,\n    NguiMap,\n    OptionBuilder,\n    {provide: NgMapApiLoader, useClass: NgMapAsyncCallbackApiLoader},\n  ]\n})\nexport class NguiMapModule {\n  static forRoot(config: ConfigOption = {}): ModuleWithProviders {\n    return {\n      ngModule: NguiMapModule,\n      providers: [\n        { provide: NG_MAP_CONFIG_TOKEN, useValue: config }\n      ],\n    };\n  }\n}\n"
  ],
  "names": [
    "extendStatics",
    "Object",
    "setPrototypeOf",
    "__proto__",
    "Array",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__extends",
    "__",
    "this",
    "constructor",
    "prototype",
    "create",
    "getJSON",
    "input",
    "match",
    "JSON",
    "parse",
    "str",
    "e",
    "replace",
    "_",
    "$1",
    "jsonize",
    "toCamelCase",
    "letter",
    "index",
    "toLowerCase",
    "toUpperCase",
    "isMapsApiLoaded",
    "google",
    "maps",
    "missingLibraryError",
    "component",
    "libName",
    "Error",
    "BaseMapDirective",
    "nguiMapComponent",
    "mapObjectName",
    "inputs",
    "outputs",
    "_this",
    "initialized$",
    "EventEmitter",
    "_subscriptions",
    "nguiMap",
    "optionBuilder",
    "forEach",
    "output",
    "ngOnInit",
    "mapIdledOnce",
    "initialize",
    "mapReady$",
    "subscribe",
    "map",
    "objectOptions",
    "googlizeAllInputs",
    "position",
    "center",
    "libraryName",
    "mapObject",
    "setMap",
    "setObjectEvents",
    "addToMapObjectGroup",
    "emit",
    "ngOnChanges",
    "changes",
    "updateGoogleObject",
    "ngOnDestroy",
    "subscription",
    "unsubscribe",
    "removeFromMapObjectGroup",
    "clearObjectEvents",
    "type",
    "Output",
    "OptionBuilder",
    "definedInputs",
    "userInputs",
    "options",
    "onlyOptionsGiven",
    "console",
    "error",
    "undefined",
    "googlize",
    "key",
    "googlizeMultiple",
    "val",
    "getJSONParsed",
    "getAnyMapObject",
    "getAnyMapConstant",
    "getDateObject",
    "LatLngBounds",
    "getMapIcons",
    "getLatLng",
    "getMarkerIcon",
    "getMapControlOption",
    "el",
    "LatLng",
    "isNaN",
    "parseFloat",
    "isFinite",
    "newOptions",
    "Function",
    "matches",
    "capitalizedKey",
    "charAt",
    "slice",
    "controlOptions",
    "newControlOptions",
    "value",
    "MapTypeId",
    "objName",
    "ControlPosition",
    "Date",
    "icon",
    "path",
    "SymbolPath",
    "arr",
    "Point",
    "Size",
    "i",
    "length",
    "Injectable",
    "NavigatorGeolocation",
    "getCurrentPosition",
    "geoLocationOptions",
    "timeout",
    "Observable",
    "responseObserver",
    "navigator",
    "geolocation",
    "next",
    "complete",
    "evt",
    "NG_MAP_CONFIG_TOKEN",
    "InjectionToken",
    "NgMapApiLoader",
    "config",
    "api$",
    "ReplaySubject",
    "apiUrl",
    "NgMapAsyncCallbackApiLoader",
    "_super",
    "zone",
    "call",
    "tslib_1.__extends",
    "load",
    "window",
    "document",
    "querySelector",
    "push",
    "componentFn",
    "addGoogleMapsApi",
    "nguiMapRef",
    "run",
    "splice",
    "script",
    "createElement",
    "id",
    "indexOf",
    "src",
    "appendChild",
    "NgZone",
    "decorators",
    "Optional",
    "Inject",
    "args",
    "NgMapAsyncApiLoader",
    "async",
    "onload",
    "GeoCoder",
    "apiLoader",
    "apiLoaderSubs",
    "geocode",
    "requestGeocode",
    "sub",
    "observer",
    "Geocoder",
    "results",
    "status",
    "GeocoderStatus",
    "OK",
    "NguiMap",
    "geoCoder",
    "object",
    "currentValue",
    "setMethodName",
    "x",
    "address",
    "geometry",
    "location",
    "definedEvents",
    "thisObj",
    "prefix",
    "definedEvent",
    "eventName",
    "getEventName",
    "runOutsideAngular",
    "addListener",
    "event",
    "param",
    "target",
    "clearListeners",
    "INPUTS",
    "OUTPUTS",
    "NguiMapComponent",
    "elementRef",
    "mapOptions",
    "inputChanges$",
    "Subject",
    "infoWindows",
    "initializeMapAfterDisplayed",
    "ngAfterViewInit",
    "apiLoaderSub",
    "pipe",
    "first",
    "initializeMap",
    "ngAfterViewChecked",
    "offsetWidth",
    "nativeElement",
    "zoom",
    "Map",
    "setCenter",
    "setTimeout",
    "debounceTime",
    "tap",
    "latLng",
    "coords",
    "latitude",
    "longitude",
    "openInfoWindow",
    "anchor",
    "open",
    "closeInfoWindow",
    "close",
    "groupName",
    "Component",
    "selector",
    "providers",
    "styles",
    "encapsulation",
    "ViewEncapsulation",
    "None",
    "template",
    "ElementRef",
    "BicyclingLayer",
    "nguiMapComp",
    "Directive",
    "InfoWindow",
    "style",
    "display",
    "infoWindow",
    "setContent",
    "element",
    "ViewChild",
    "read",
    "ViewContainerRef",
    "CustomMarker",
    "htmlEl",
    "CustomMarkerOverlayView",
    "visible",
    "setPosition",
    "visibility",
    "name",
    "lng",
    "getProjection",
    "positionOnMap_1",
    "projection",
    "posPixel",
    "fromLatLngToDivPixel",
    "Math",
    "round",
    "y",
    "offsetHeight",
    "left",
    "top",
    "onAdd",
    "getPanes",
    "overlayMouseTarget",
    "draw",
    "setZIndex",
    "zIndex",
    "setVisible",
    "onRemove",
    "getPosition",
    "OverlayView",
    "Circle",
    "DataLayer",
    "data",
    "addGeoJson",
    "loadGeoJson",
    "add",
    "DirectionsRenderer",
    "directionsService",
    "DirectionsService",
    "directionsRenderer",
    "showDirections",
    "directionsRequest",
    "route",
    "response",
    "DirectionsStatus",
    "setDirections",
    "Input",
    "DrawingManager",
    "GroundOverlay",
    "HeatmapLayer",
    "KmlLayer",
    "Marker",
    "PlacesAutoComplete",
    "place_changed",
    "places",
    "autocomplete",
    "Autocomplete",
    "place",
    "getPlace",
    "bounds",
    "componentRestrictions",
    "types",
    "Polygon",
    "Polyline",
    "StreetViewPanorama",
    "TrafficLayer",
    "TransitLayer",
    "COMPONENTS_DIRECTIVES",
    "NguiMapModule",
    "forRoot",
    "ngModule",
    "provide",
    "useValue",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports",
    "useClass"
  ],
  "mappings": "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"
}
