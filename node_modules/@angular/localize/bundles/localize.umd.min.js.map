{"version":3,"sources":["packages/localize/localize.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","localize","compiler","this","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","parseMessage","messageParts","expressions","location","index","substitutions","metadata","parseMetadata","raw","cleanedMessageParts","text","placeholderNames","messageString","length","_a","splitBlock","messagePart","_b","block","placeholderName","undefined","messageId","id","computeMsgId","meaning","legacyIds","filter","description","cooked","split","meaningDescAndId","slice","_c","_d","charAt","endOfBlock","findEndOfBlock","substring","cookedIndex","rawIndex","Error","MissingTranslationError","_super","parsedMessage","_this","describeMessage","type","__extends","__","constructor","prototype","create","translate","translations","message","translation","map","placeholder","parseTranslation","parts","rawMessageParts","part","makeTemplateObject","defineProperty","meaningString","legacy","l","join","translate$1","$localize","TRANSLATIONS","console","warn","enumerable","get","clearTranslations","loadTranslations","keys","forEach","key","ɵMissingTranslationError","ɵfindEndOfBlock","ɵisMissingTranslationError","isMissingTranslationError","ɵmakeParsedTranslation","makeParsedTranslation","ɵmakeTemplateObject","ɵparseMessage","ɵparseMetadata","ɵparseTranslation","ɵsplitBlock","ɵtranslate"],"mappings":"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","sourcesContent":["/**\n * @license Angular v9.1.12\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/compiler')) :\n    typeof define === 'function' && define.amd ? define('@angular/localize', ['exports', '@angular/compiler'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.localize = {}), global.ng.compiler));\n}(this, (function (exports, compiler) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * The character used to mark the start and end of a \"block\" in a `$localize` tagged string.\n     * A block can indicate metadata about the message or specify a name of a placeholder for a\n     * substitution expressions.\n     *\n     * For example:\n     *\n     * ```ts\n     * $localize`Hello, ${title}:title:!`;\n     * $localize`:meaning|description@@id:source message text`;\n     * ```\n     */\n    var BLOCK_MARKER = ':';\n    /**\n     * The marker used to separate a message's \"meaning\" from its \"description\" in a metadata block.\n     *\n     * For example:\n     *\n     * ```ts\n     * $localize `:correct|Indicates that the user got the answer correct: Right!`;\n     * $localize `:movement|Button label for moving to the right: Right!`;\n     * ```\n     */\n    var MEANING_SEPARATOR = '|';\n    /**\n     * The marker used to separate a message's custom \"id\" from its \"description\" in a metadata block.\n     *\n     * For example:\n     *\n     * ```ts\n     * $localize `:A welcome message on the home page@@myApp-homepage-welcome: Welcome!`;\n     * ```\n     */\n    var ID_SEPARATOR = '@@';\n    /**\n     * The marker used to separate legacy message ids from the rest of a metadata block.\n     *\n     * For example:\n     *\n     * ```ts\n     * $localize `:@@custom-id␟2df64767cd895a8fabe3e18b94b5b6b6f9e2e3f0: Welcome!`;\n     * ```\n     *\n     * Note that this character is the \"symbol for the unit separator\" (␟) not the \"unit separator\n     * character\" itself, since that has no visual representation. See https://graphemica.com/%E2%90%9F.\n     *\n     * Here is some background for the original \"unit separator character\":\n     * https://stackoverflow.com/questions/8695118/whats-the-file-group-record-unit-separator-control-characters-and-its-usage\n     */\n    var LEGACY_ID_INDICATOR = '\\u241F';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n        if (m) return m.call(o);\r\n        if (o && typeof o.length === \"number\") return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n        throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\r\n\r\n    function __classPrivateFieldGet(receiver, privateMap) {\r\n        if (!privateMap.has(receiver)) {\r\n            throw new TypeError(\"attempted to get private field on non-instance\");\r\n        }\r\n        return privateMap.get(receiver);\r\n    }\r\n\r\n    function __classPrivateFieldSet(receiver, privateMap, value) {\r\n        if (!privateMap.has(receiver)) {\r\n            throw new TypeError(\"attempted to set private field on non-instance\");\r\n        }\r\n        privateMap.set(receiver, value);\r\n        return value;\r\n    }\n\n    /**\n     * Parse a `$localize` tagged string into a structure that can be used for translation.\n     *\n     * See `ParsedMessage` for an example.\n     */\n    function parseMessage(messageParts, expressions, location) {\n        var substitutions = {};\n        var metadata = parseMetadata(messageParts[0], messageParts.raw[0]);\n        var cleanedMessageParts = [metadata.text];\n        var placeholderNames = [];\n        var messageString = metadata.text;\n        for (var i = 1; i < messageParts.length; i++) {\n            var _a = splitBlock(messageParts[i], messageParts.raw[i]), messagePart = _a.text, _b = _a.block, placeholderName = _b === void 0 ? computePlaceholderName(i) : _b;\n            messageString += \"{$\" + placeholderName + \"}\" + messagePart;\n            if (expressions !== undefined) {\n                substitutions[placeholderName] = expressions[i - 1];\n            }\n            placeholderNames.push(placeholderName);\n            cleanedMessageParts.push(messagePart);\n        }\n        var messageId = metadata.id || compiler.computeMsgId(messageString, metadata.meaning || '');\n        var legacyIds = metadata.legacyIds && metadata.legacyIds.filter(function (id) { return id !== messageId; });\n        return {\n            id: messageId,\n            legacyIds: legacyIds,\n            substitutions: substitutions,\n            text: messageString,\n            meaning: metadata.meaning || '',\n            description: metadata.description || '',\n            messageParts: cleanedMessageParts,\n            placeholderNames: placeholderNames,\n            location: location,\n        };\n    }\n    /**\n     * Parse the given message part (`cooked` + `raw`) to extract the message metadata from the text.\n     *\n     * If the message part has a metadata block this function will extract the `meaning`,\n     * `description`, `customId` and `legacyId` (if provided) from the block. These metadata properties\n     * are serialized in the string delimited by `|`, `@@` and `␟` respectively.\n     *\n     * (Note that `␟` is the `LEGACY_ID_INDICATOR` - see `constants.ts`.)\n     *\n     * For example:\n     *\n     * ```ts\n     * `:meaning|description@@custom-id`\n     * `:meaning|@@custom-id`\n     * `:meaning|description`\n     * `description@@custom-id`\n     * `meaning|`\n     * `description`\n     * `@@custom-id`\n     * `:meaning|description@@custom-id␟legacy-id-1␟legacy-id-2`\n     * ```\n     *\n     * @param cooked The cooked version of the message part to parse.\n     * @param raw The raw version of the message part to parse.\n     * @returns A object containing any metadata that was parsed from the message part.\n     */\n    function parseMetadata(cooked, raw) {\n        var _a = splitBlock(cooked, raw), messageString = _a.text, block = _a.block;\n        if (block === undefined) {\n            return { text: messageString };\n        }\n        else {\n            var _b = __read(block.split(LEGACY_ID_INDICATOR)), meaningDescAndId = _b[0], legacyIds = _b.slice(1);\n            var _c = __read(meaningDescAndId.split(ID_SEPARATOR, 2), 2), meaningAndDesc = _c[0], id = _c[1];\n            var _d = __read(meaningAndDesc.split(MEANING_SEPARATOR, 2), 2), meaning = _d[0], description = _d[1];\n            if (description === undefined) {\n                description = meaning;\n                meaning = undefined;\n            }\n            if (description === '') {\n                description = undefined;\n            }\n            return { text: messageString, meaning: meaning, description: description, id: id, legacyIds: legacyIds };\n        }\n    }\n    /**\n     * Split a message part (`cooked` + `raw`) into an optional delimited \"block\" off the front and the\n     * rest of the text of the message part.\n     *\n     * Blocks appear at the start of message parts. They are delimited by a colon `:` character at the\n     * start and end of the block.\n     *\n     * If the block is in the first message part then it will be metadata about the whole message:\n     * meaning, description, id.  Otherwise it will be metadata about the immediately preceding\n     * substitution: placeholder name.\n     *\n     * Since blocks are optional, it is possible that the content of a message block actually starts\n     * with a block marker. In this case the marker must be escaped `\\:`.\n     *\n     * @param cooked The cooked version of the message part to parse.\n     * @param raw The raw version of the message part to parse.\n     * @returns An object containing the `text` of the message part and the text of the `block`, if it\n     * exists.\n     * @throws an error if the `block` is unterminated\n     */\n    function splitBlock(cooked, raw) {\n        if (raw.charAt(0) !== BLOCK_MARKER) {\n            return { text: cooked };\n        }\n        else {\n            var endOfBlock = findEndOfBlock(cooked, raw);\n            return {\n                block: cooked.substring(1, endOfBlock),\n                text: cooked.substring(endOfBlock + 1),\n            };\n        }\n    }\n    function computePlaceholderName(index) {\n        return index === 1 ? 'PH' : \"PH_\" + (index - 1);\n    }\n    /**\n     * Find the end of a \"marked block\" indicated by the first non-escaped colon.\n     *\n     * @param cooked The cooked string (where escaped chars have been processed)\n     * @param raw The raw string (where escape sequences are still in place)\n     *\n     * @returns the index of the end of block marker\n     * @throws an error if the block is unterminated\n     */\n    function findEndOfBlock(cooked, raw) {\n        /************************************************************************************************\n         * This function is repeated in `src/localize/src/localize.ts` and the two should be kept in sync.\n         * (See that file for more explanation of why.)\n         ************************************************************************************************/\n        for (var cookedIndex = 1, rawIndex = 1; cookedIndex < cooked.length; cookedIndex++, rawIndex++) {\n            if (raw[rawIndex] === '\\\\') {\n                rawIndex++;\n            }\n            else if (cooked[cookedIndex] === BLOCK_MARKER) {\n                return cookedIndex;\n            }\n        }\n        throw new Error(\"Unterminated $localize metadata block in \\\"\" + raw + \"\\\".\");\n    }\n\n    var MissingTranslationError = /** @class */ (function (_super) {\n        __extends(MissingTranslationError, _super);\n        function MissingTranslationError(parsedMessage) {\n            var _this = _super.call(this, \"No translation found for \" + describeMessage(parsedMessage) + \".\") || this;\n            _this.parsedMessage = parsedMessage;\n            _this.type = 'MissingTranslationError';\n            return _this;\n        }\n        return MissingTranslationError;\n    }(Error));\n    function isMissingTranslationError(e) {\n        return e.type === 'MissingTranslationError';\n    }\n    /**\n     * Translate the text of the `$localize` tagged-string (i.e. `messageParts` and\n     * `substitutions`) using the given `translations`.\n     *\n     * The tagged-string is parsed to extract its `messageId` which is used to find an appropriate\n     * `ParsedTranslation`. If this doesn't match and there are legacy ids then try matching a\n     * translation using those.\n     *\n     * If one is found then it is used to translate the message into a new set of `messageParts` and\n     * `substitutions`.\n     * The translation may reorder (or remove) substitutions as appropriate.\n     *\n     * If there is no translation with a matching message id then an error is thrown.\n     * If a translation contains a placeholder that is not found in the message being translated then an\n     * error is thrown.\n     */\n    function translate(translations, messageParts, substitutions) {\n        var message = parseMessage(messageParts, substitutions);\n        // Look up the translation using the messageId, and then the legacyId if available.\n        var translation = translations[message.id];\n        // If the messageId did not match a translation, try matching the legacy ids instead\n        if (message.legacyIds !== undefined) {\n            for (var i = 0; i < message.legacyIds.length && translation === undefined; i++) {\n                translation = translations[message.legacyIds[i]];\n            }\n        }\n        if (translation === undefined) {\n            throw new MissingTranslationError(message);\n        }\n        return [\n            translation.messageParts, translation.placeholderNames.map(function (placeholder) {\n                if (message.substitutions.hasOwnProperty(placeholder)) {\n                    return message.substitutions[placeholder];\n                }\n                else {\n                    throw new Error(\"There is a placeholder name mismatch with the translation provided for the message \" + describeMessage(message) + \".\\n\" +\n                        (\"The translation contains a placeholder with name \" + placeholder + \", which does not exist in the message.\"));\n                }\n            })\n        ];\n    }\n    /**\n     * Parse the `messageParts` and `placeholderNames` out of a target `message`.\n     *\n     * Used by `loadTranslations()` to convert target message strings into a structure that is more\n     * appropriate for doing translation.\n     *\n     * @param message the message to be parsed.\n     */\n    function parseTranslation(messageString) {\n        var parts = messageString.split(/{\\$([^}]*)}/);\n        var messageParts = [parts[0]];\n        var placeholderNames = [];\n        for (var i = 1; i < parts.length - 1; i += 2) {\n            placeholderNames.push(parts[i]);\n            messageParts.push(\"\" + parts[i + 1]);\n        }\n        var rawMessageParts = messageParts.map(function (part) { return part.charAt(0) === BLOCK_MARKER ? '\\\\' + part : part; });\n        return {\n            text: messageString,\n            messageParts: makeTemplateObject(messageParts, rawMessageParts),\n            placeholderNames: placeholderNames,\n        };\n    }\n    /**\n     * Create a `ParsedTranslation` from a set of `messageParts` and `placeholderNames`.\n     *\n     * @param messageParts The message parts to appear in the ParsedTranslation.\n     * @param placeholderNames The names of the placeholders to intersperse between the `messageParts`.\n     */\n    function makeParsedTranslation(messageParts, placeholderNames) {\n        if (placeholderNames === void 0) { placeholderNames = []; }\n        var messageString = messageParts[0];\n        for (var i = 0; i < placeholderNames.length - 1; i++) {\n            messageString += \"{$\" + placeholderNames[i] + \"}\" + messageParts[i + 1];\n        }\n        return {\n            text: messageString,\n            messageParts: makeTemplateObject(messageParts, messageParts),\n            placeholderNames: placeholderNames\n        };\n    }\n    /**\n     * Create the specialized array that is passed to tagged-string tag functions.\n     *\n     * @param cooked The message parts with their escape codes processed.\n     * @param raw The message parts with their escaped codes as-is.\n     */\n    function makeTemplateObject(cooked, raw) {\n        Object.defineProperty(cooked, 'raw', { value: raw });\n        return cooked;\n    }\n    function describeMessage(message) {\n        var meaningString = message.meaning && \" - \\\"\" + message.meaning + \"\\\"\";\n        var legacy = message.legacyIds && message.legacyIds.length > 0 ?\n            \" [\" + message.legacyIds.map(function (l) { return \"\\\"\" + l + \"\\\"\"; }).join(', ') + \"]\" :\n            '';\n        return \"\\\"\" + message.id + \"\\\"\" + legacy + \" (\\\"\" + message.text + \"\\\"\" + meaningString + \")\";\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Load translations for `$localize`.\n     *\n     * The given `translations` are processed and added to a lookup based on their `MessageId`.\n     * A new translation will overwrite a previous translation if it has the same `MessageId`.\n     *\n     * * If a message is generated by the Angular compiler from an `i18n` marker in a template, the\n     *   `MessageId` is passed through to the `$localize` call as a custom `MessageId`. The `MessageId`\n     *   will match what is extracted into translation files.\n     *\n     * * If the translation is from a call to `$localize` in application code, and no custom `MessageId`\n     *   is provided, then the `MessageId` can be generated by passing the tagged string message-parts\n     *   to the `parseMessage()` function (not currently public API).\n     *\n     * @publicApi\n     *\n     */\n    function loadTranslations(translations) {\n        // Ensure the translate function exists\n        if (!$localize.translate) {\n            $localize.translate = translate$1;\n        }\n        if (!$localize.TRANSLATIONS) {\n            $localize.TRANSLATIONS = {};\n        }\n        Object.keys(translations).forEach(function (key) {\n            $localize.TRANSLATIONS[key] = parseTranslation(translations[key]);\n        });\n    }\n    /**\n     * Remove all translations for `$localize`.\n     *\n     * @publicApi\n     */\n    function clearTranslations() {\n        $localize.translate = undefined;\n        $localize.TRANSLATIONS = {};\n    }\n    /**\n     * Translate the text of the given message, using the loaded translations.\n     *\n     * This function may reorder (or remove) substitutions as indicated in the matching translation.\n     */\n    function translate$1(messageParts, substitutions) {\n        try {\n            return translate($localize.TRANSLATIONS, messageParts, substitutions);\n        }\n        catch (e) {\n            console.warn(e.message);\n            return [messageParts, substitutions];\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    Object.defineProperty(exports, 'ɵcomputeMsgId', {\n        enumerable: true,\n        get: function () {\n            return compiler.computeMsgId;\n        }\n    });\n    exports.clearTranslations = clearTranslations;\n    exports.loadTranslations = loadTranslations;\n    exports.ɵMissingTranslationError = MissingTranslationError;\n    exports.ɵfindEndOfBlock = findEndOfBlock;\n    exports.ɵisMissingTranslationError = isMissingTranslationError;\n    exports.ɵmakeParsedTranslation = makeParsedTranslation;\n    exports.ɵmakeTemplateObject = makeTemplateObject;\n    exports.ɵparseMessage = parseMessage;\n    exports.ɵparseMetadata = parseMetadata;\n    exports.ɵparseTranslation = parseTranslation;\n    exports.ɵsplitBlock = splitBlock;\n    exports.ɵtranslate = translate;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=localize.umd.js.map\n"]}